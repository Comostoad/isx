<?xml version='1.0'?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/TR/WD-xsl" xmlns="http://www.w3.org/TR/REC-html40">
<!-- modified for Metlife to reference the TCS popup apt files that contain TCS disclaimer reference -->



<xsl:template match="/">
	<xsl:choose>
		<xsl:when test="kBlockList/kBlock/output/.//subText">
			<xsl:apply-templates select="kBlockList"/>
       		</xsl:when>
		<xsl:when test="kBlockList/kBlock/output/.//link">
			<xsl:apply-templates select="kBlockList"/>
       		</xsl:when>
	</xsl:choose>
</xsl:template>
	
<xsl:template match="kBlockList">
	<xsl:if test="kBlock"> <!-- generate aboslutely nothing if the list is empty -->
		<tr>
		<td bgcolor="#9AA9BE" width="100%" colspan="2">
		<!--generate  anchor for TOC link to the section -->
		<xsl:element name="A"><xsl:attribute name="name"><xsl:value-of select="kBlock[0]/@code"/></xsl:attribute></xsl:element>
		<p class="secondaryheaders">&#160;<xsl:value-of select="kBlock[0]/kBlockHeader/searchName"/></p></td>
				
		</tr>

		<tr>
		<td valign="top" class="bodytext" colspan="2">
		<!--iterate thru each kBlock-->
		<xsl:for-each select="kBlock">
			<xsl:if expr="childNumber(this)!=1">
				<xsl:element name="A">
					<xsl:attribute name="name"><xsl:value-of select="@code"/></xsl:attribute>
				</xsl:element>
			</xsl:if>
			<!--write div tag for Call tracking functionality-->
			<xsl:element name="DIV">
				<xsl:attribute name="NAME"><xsl:eval>getDivName()</xsl:eval></xsl:attribute>
			<xsl:apply-templates select="output"/></xsl:element>
		</xsl:for-each>
		</td>
		</tr>
		<tr><td><br/></td>
		<td valign="top">
		<p align="right">
		<xsl:element name="A"><xsl:attribute name="href">#top</xsl:attribute><img border="0" src="img/backtotop.gif" width="180" height="15"/></xsl:element></p>
		</td>
		</tr>
	</xsl:if>
</xsl:template>


<xsl:template match="kBlock">
<xsl:element name="A">
	<xsl:attribute name="name"><xsl:value-of select="@code"/></xsl:attribute>
</xsl:element>
<xsl:apply-templates select="output"/>
</xsl:template>

<xsl:template match="output">
	<xsl:apply-templates />
</xsl:template>

<xsl:template match="div">
    <xsl:element name="DIV">
      <xsl:for-each select="@*">
 		<xsl:attribute eval="getNodeName()"><xsl:value-of select="."/></xsl:attribute>
    	</xsl:for-each> 
	<xsl:apply-templates />
    </xsl:element>
  </xsl:template>

  <xsl:template match="span">    
	<xsl:choose>
	<xsl:when test="@class[.='piechartvalue']">
		<xsl:eval>AddDataToPieChart(this)</xsl:eval>
		<xsl:apply-templates />
	</xsl:when>
	<xsl:when test="@class[.='piechartcolor']">
		<xsl:element name="span"><xsl:attribute name="style">background-color:<xsl:eval>AddColorToPieChartArray(this)</xsl:eval></xsl:attribute>&#160;&#160;&#160;&#160;</xsl:element>&#160;
	</xsl:when>
	<xsl:otherwise>
		<xsl:element name="SPAN">
			<xsl:for-each select="@*">
				<xsl:attribute eval="getNodeName()"><xsl:value-of select="."/></xsl:attribute>
			</xsl:for-each> 
			<xsl:apply-templates />
		</xsl:element>
	</xsl:otherwise>
	</xsl:choose>
  </xsl:template>
<xsl:template match="text">
	<xsl:apply-templates />
</xsl:template>

<xsl:template match="subText"><xsl:eval>this.text</xsl:eval></xsl:template>

<xsl:template match="varText"><xsl:apply-templates /></xsl:template>

<xsl:template match="link"><!--Generate links differently for the MORE column than for the content column--><xsl:choose><xsl:when expr="GetInMoreFlag()"><!--For the MORE column generate links the same way as kblock_sealso.xsl --><xsl:if test="destination/kBlockRef"><xsl:for-each select="destination/presPageRefList/presPageRef"><TR><TD width="1" valign="top"><xsl:if expr="PickBullet(this)==1"><img border="0" src="img/morebullet.gif" width="7" height="7"/></xsl:if><xsl:if expr="PickBullet(this)==0"><img border="0" src="img/morearrow.gif" width="7" height="7"/></xsl:if></TD><TD><xsl:element name="A"><xsl:attribute name="class"><xsl:choose><!-- if the link has a style, use it --><xsl:when test="../../../linkStyle[. $ne$ '']"><xsl:value-of select="../../../linkStyle" /></xsl:when><xsl:otherwise>seealsolink</xsl:otherwise></xsl:choose></xsl:attribute><xsl:attribute name="href">javascript:ShowPage('<xsl:value-of select="@id"/>',null, null, null, null, null, null, null<xsl:if test="../../../sameWindow[.='false']">, '_blank'</xsl:if>)</xsl:attribute><xsl:apply-templates select="../../../displayText//subText"/><xsl:if test="../../../displayText//subText[.='']"><!--<xsl:value-of select="title" />--></xsl:if><xsl:if test="../../../displayText//subText[.$ne$'']"><xsl:choose><xsl:when test="context()[not(end())]">&#160;(<xsl:value-of select="title" />)</xsl:when><xsl:otherwise><xsl:if test="context()[index()$ne$0]">&#160;(<xsl:value-of select="title" />)</xsl:if></xsl:otherwise></xsl:choose></xsl:if></xsl:element></TD></TR></xsl:for-each></xsl:if><xsl:if test="destination/url"><TR><TD width="1" valign="top"><img src='img/extbullet.gif' width='7' height='7'/></TD><TD valign = "middle"><xsl:element name="A"><xsl:attribute name = "class"><xsl:choose><!--if the link has a style, use it--><xsl:when test="linkStyle[. $ne$ '']"><xsl:value-of select="linkStyle" /></xsl:when><xsl:otherwise>seealsolink</xsl:otherwise></xsl:choose></xsl:attribute><xsl:attribute name="HREF"><xsl:apply-templates select="destination/url//subText"/></xsl:attribute><xsl:if test="sameWindow[.='false']"><xsl:attribute name="target">_blank</xsl:attribute></xsl:if><xsl:apply-templates select="displayText//subText" /></xsl:element></TD></TR></xsl:if></xsl:when><xsl:otherwise><!--For the content column generate embedded links  --><xsl:value-of select="prefixText" /><!-- is the target a block or and external url? --><!-- if the target is a block... --><xsl:if test="destination/kBlockRef"><xsl:choose><!-- ...does the link have a special style? --><xsl:when test="linkStyle[.='contactlink' || .='definitionlink' || .='contentlink' || .='tablemorelink']"><xsl:choose><!-- If the link opens in a new window... --><xsl:when test="sameWindow[.='false']"><xsl:element name="A"><xsl:attribute name="href">javascript:BlockLink(<xsl:choose><xsl:when test="linkStyle[.='contactlink']">'!USER_TCSpopup_contact.apt'</xsl:when><xsl:when test="linkStyle[.='definitionlink']">'!USER_TCSpopup_definition.apt'</xsl:when><xsl:when test="linkStyle[.='contentlink']">'!USER_TCSpopup_content.apt'</xsl:when><xsl:otherwise>null</xsl:otherwise></xsl:choose>,'<xsl:value-of select="linkStyle" />','<xsl:value-of select="destination/kBlockRef/@id" />')</xsl:attribute><xsl:attribute name="class"><xsl:value-of select="linkStyle"/></xsl:attribute><xsl:if test="linkStyle[.='tablemorelink']"><br/></xsl:if><xsl:apply-templates select="displayText//subText" /></xsl:element></xsl:when><!-- the link is followed in the same window and... --><xsl:otherwise><xsl:choose><!-- ... the target block is on a page... --><xsl:when test="destination/presPageRefList/presPageRef"><xsl:for-each select="destination/presPageRefList/presPageRef"><xsl:element name="A"><xsl:attribute name="href">javascript:BlockLink('<xsl:value-of select="@id" />')</xsl:attribute><xsl:attribute name="class"><xsl:value-of select="../../../linkStyle" /></xsl:attribute><xsl:if test="../../../linkStyle[.='tablemorelink']"><br/></xsl:if><xsl:apply-templates select="../../../displayText//subText" /><xsl:choose><xsl:when test="context()[not(end())]">&#160;(<xsl:value-of select="title" />)<BR /></xsl:when><xsl:otherwise><xsl:if test="context()[index()$ne$0]">&#160;(<xsl:value-of select="title" />)<BR /></xsl:if></xsl:otherwise></xsl:choose></xsl:element></xsl:for-each></xsl:when><!-- ... the target is "not" in a page...--><xsl:otherwise><xsl:element name="A"><xsl:attribute name="href">javascript:BlockLink(<xsl:choose><xsl:when test="linkStyle[.='contactlink']">'!USER_TCSpopup_contact.apt'</xsl:when><xsl:when test="linkStyle[.='definitionlink']">'!USER_TCSpopup_definition.apt'</xsl:when><xsl:when test="linkStyle[.='contentlink']">'!USER_TCSpopup_content.apt'</xsl:when><xsl:otherwise>null</xsl:otherwise></xsl:choose>,null,'<xsl:value-of select="destination/kBlockRef/@id" />')</xsl:attribute><xsl:attribute name="class"><xsl:value-of /></xsl:attribute><xsl:if test="linkStyle[.='tablemorelink']"><br/></xsl:if><xsl:apply-templates select="displayText//subText" /></xsl:element></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:when><!-- the link does not have one of the special styles --><xsl:otherwise><!-- If the link opens in a new window... --><xsl:for-each select="destination/presPageRefList/presPageRef"><xsl:element name="A"><xsl:attribute name="href">javascript:BlockLink('<xsl:value-of select="@id" />',null,null<xsl:if test="../../../sameWindow[.='false']">,'_blank'</xsl:if>)</xsl:attribute><xsl:attribute name="class"><xsl:choose><!-- if the link has a style, use it --><xsl:when test="../../../linkStyle[. $ne$ '']"><xsl:value-of select="../../../linkStyle" /></xsl:when><xsl:otherwise>contentlink</xsl:otherwise></xsl:choose></xsl:attribute><xsl:apply-templates select="../../../displayText//subText" /><xsl:choose><xsl:when test="context()[not(end())]">&#160;(<xsl:value-of select="title" />)<BR /></xsl:when><xsl:otherwise><xsl:if test="context()[index()$ne$0]">&#160;(<xsl:value-of select="title" />)<BR /></xsl:if></xsl:otherwise></xsl:choose></xsl:element></xsl:for-each></xsl:otherwise></xsl:choose></xsl:if><xsl:if test="destination/url"><xsl:element name="A"><xsl:attribute name = "class"><xsl:choose><!--if the link has a style, use it--><xsl:when test="linkStyle[. $ne$ '']"><xsl:value-of select="linkStyle" /></xsl:when><xsl:otherwise>externallink</xsl:otherwise></xsl:choose></xsl:attribute><xsl:attribute name="HREF"><xsl:apply-templates select="destination/url//subText"/></xsl:attribute><xsl:if test="sameWindow[.='false']"><xsl:attribute name="target">_blank</xsl:attribute></xsl:if><xsl:apply-templates select="displayText//subText" /></xsl:element></xsl:if><xsl:value-of select="postfixText" /></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="br">
	<BR /><xsl:apply-templates/>
</xsl:template>

<xsl:template match="table">
	<xsl:eval>StartTable()</xsl:eval>
<xsl:choose>
	<xsl:when test="@class[.='comparetable']">
		<xsl:element name="TABLE">
		<xsl:attribute name="border">0</xsl:attribute><xsl:attribute name="width">100%</xsl:attribute><xsl:attribute name="cellspacing">0</xsl:attribute><xsl:attribute name="cellpadding">3</xsl:attribute>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:when>
	<xsl:when test="@class[.='tablewithpiechart']">
		<div align="center">
		<table class="tablewithpiechart">
		<tr>
		<td>
			<table border="0" cellspacing="0" cellpadding="5">
			<xsl:apply-templates /> 
			</table>
		</td>
		<td>&#160;&#160;&#160;</td>
		<td>
						<!-- New code to generate url for creating pie chart -->
			<xsl:element name="img">
				<xsl:attribute name="src"><xsl:eval>GetServerURL()</xsl:eval>?values=<xsl:eval>GetPieChartValues()</xsl:eval>&amp;colors=<xsl:eval>GetPieChartColors()</xsl:eval></xsl:attribute>
				<xsl:attribute name="alt"><xsl:eval>GetPieChartAlt()</xsl:eval></xsl:attribute>
				<!-- uncomment the next two lines to set the pie chart height and width -->
				<!--<xsl:attribute name="height"><xsl:eval>GetPieHeight()</xsl:eval></xsl:attribute>-->
				<!--<xsl:attribute name="width"><xsl:eval>GetPieWidth()</xsl:eval></xsl:attribute>-->
			</xsl:element>
		</td>
		</tr>
		</table>			
		</div>
	</xsl:when>
	<xsl:otherwise>	
		<xsl:element name="TABLE">
		<xsl:attribute name="border">1</xsl:attribute><xsl:attribute name="width">100%</xsl:attribute><xsl:attribute name="cellspacing">0</xsl:attribute><xsl:attribute name="cellpadding">3</xsl:attribute>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:otherwise>
</xsl:choose>

</xsl:template>

<xsl:template match="th">
	
	<xsl:choose>
	<xsl:when test="../../@class[.='tablewithpiechart']">
		<xsl:element name="th"><xsl:attribute name="class">piechartheader</xsl:attribute>
			<xsl:apply-templates /> 
		</xsl:element> 
	</xsl:when>
	<xsl:when test="../../@class[.='comparetable']">
	<xsl:eval>checkheading()</xsl:eval>	
	<xsl:if expr="goheading()==1">	
	<td width="50%">  
       	   <table  width="100%" border="0">  
        	    <tr> <td width="100%" height="1">
	 <table border="0" cellspacing="0" cellpadding="0" height="1" width="100%">
	       <tr>
	        <td bgcolor="#9AA9BE" height="1" width ="100%"><img border="0" src="img/blank.gif" width="100%" height="1"/></td>
	        </tr>
	        </table>
                       </td>
                   </tr>

	<xsl:element name="th"><xsl:attribute name="class">tablehead</xsl:attribute> 
	         <xsl:apply-templates /> 
	</xsl:element> 


         <tr>
         <td width="100%" height="1">
	<table border="0" cellspacing="0" cellpadding="0" height="1" width="100%">
	    <tr>
	        <td bgcolor="#9AA9BE" height="1" width ="100%"><img border="0" src="img/blank.gif" width="100%" height="1"/></td>
	    </tr>
	</table>
         </td>
         </tr>

     </table> 
    </td> 

                              </xsl:if>	

		<xsl:if expr="goheading()==2">	
		<td rowspan="100%" width="1" height="100%">
			<table border="0" cellspacing="0" cellpadding="0" height="100%">
	   		<tr> <td   bgcolor="#000000"><img border="0" src="img/blank.gif" width="1" /> </td>  </tr>
			</table>
		</td>

                             <td width="50%">  
	             <table  width="100%" border="0">  
        	             <tr>
                            <td width="100%" height="1">
	            <table border="0" cellspacing="0" cellpadding="0" height="1" width="100%">
	            <tr><td bgcolor="#9AA9BE" height="1" width ="100%"><img border="0" src="img/blank.gif" width="100%" height="1"/></td> </tr>
	            </table>
                            </td>
                            </tr>

			<xsl:element name="th"><xsl:attribute name="class">tablehead</xsl:attribute> 
	         			<xsl:apply-templates /> 
			</xsl:element> 

                            <tr>
                            <td width="100%" height="1">
	            <table border="0" cellspacing="0" cellpadding="0" height="1" width="100%">
	            <tr><td bgcolor="#9AA9BE" height="1" width ="100%"><img border="0" src="img/blank.gif" width="100%" height="1"/></td></tr>
	          </table>
                          </td>
         </tr>

     </table> 
    </td> 



		</xsl:if>
	
	</xsl:when>
	<xsl:otherwise>

	<xsl:element name="th"><xsl:attribute name="class">tablehead</xsl:attribute><xsl:attribute name="valign">top</xsl:attribute> 
	         <xsl:apply-templates /> 
	</xsl:element> 
	
	</xsl:otherwise>	
	</xsl:choose>

</xsl:template>

<xsl:template match="tr">
	<xsl:eval>NextTableRow()</xsl:eval>
	<TR><xsl:apply-templates /></TR>
</xsl:template>

<xsl:template match="td">
           
	<xsl:choose>
	<xsl:when test="../../@class[.='comparetable']">
		<xsl:element name="td"><xsl:attribute name="class">tablebody</xsl:attribute><xsl:attribute name="valign">top</xsl:attribute>
			<xsl:apply-templates />&#160;
		</xsl:element>
	</xsl:when>
	<xsl:when test="../../@class[.='tablewithpiechart']">
		<xsl:element name="td">
			<xsl:attribute name="NOWRAP"></xsl:attribute>

			<xsl:choose>
			<xsl:when test="@class[.='piechartvalue']">
				<xsl:attribute name="class">piechartvalue</xsl:attribute>
			</xsl:when>
			<xsl:when test=".//span/@class[.='piechartvalue']">
				<xsl:attribute name="class">piechartvalue</xsl:attribute>
			</xsl:when>
			<xsl:when test="@class[.='piechartfooter']">
				<xsl:attribute name="class">piechartfooter</xsl:attribute>
			</xsl:when>
			<xsl:when test=".//span/@class[.='piechartfooter']">
				<xsl:attribute name="class">piechartfooter</xsl:attribute>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="class">piechartcell</xsl:attribute>
			</xsl:otherwise>
			</xsl:choose>
			<xsl:if test="@class[.='alignright']"><xsl:attribute name="align">right</xsl:attribute></xsl:if>
			<xsl:if test=".//span/@class[.='alignright']"><xsl:attribute name="align">right</xsl:attribute></xsl:if>
			<xsl:choose>
			<xsl:when test=".//subText"><xsl:apply-templates /></xsl:when>
			<xsl:otherwise>&#160;</xsl:otherwise></xsl:choose></xsl:element>
	</xsl:when>
	<xsl:otherwise>
		<xsl:element name="td"><xsl:attribute name="class">tablebody</xsl:attribute><xsl:attribute name="valign">top</xsl:attribute>
			<xsl:choose>
			<xsl:when expr="IsOddRow()">
				<xsl:attribute name="bgcolor">#FFF6EB</xsl:attribute>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="bgcolor">#FFE8CF</xsl:attribute>
			</xsl:otherwise>
			</xsl:choose>
			<xsl:apply-templates />&#160;
		</xsl:element>
	</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template match="ul">
	<UL><xsl:apply-templates /></UL>
</xsl:template>

<xsl:template match="li">
	<LI><xsl:apply-templates /></LI>
</xsl:template>

<!-- End: templates -->

<xsl:script language="jscript"><![CDATA[
var nRowNumber = 0;
var nInMore = 0;
var heading = 0;

var nDivCount=0;

function SetInMoreFlag(nValue)
{
	  nInMore = nValue;
}

function GetServerURL()
{
	return strServerURL;
}

function GetInMoreFlag()
{
	  return nInMore;
}  

function StartTable()
{
	nRowNumber = 0;
}

function NextTableRow()
{
	nRowNumber++;
}

function IsOddRow()
{
	return (nRowNumber % 2);
}

function PickBullet(e)
{
	var PageName = e.selectSingleNode("name").text;
	var lcPageName = PageName.toLowerCase();
	if (lcPageName.indexOf("_home.") >= 0 || lcPageName.indexOf("USER_") >= 0)
		return(1);
	else
		return(0); 

}


function checkheading()
{

	heading++;
}

function goheading()
{
	
	return heading;
}

function getDivName()
{
	return "kBlockDiv"+ nDivCount++; 
}



// CHARTING FUNCTIONS

// Configuration

//var strServerURL = "[insert server name and path to the aspx file]/ChartGenerator.aspx";
//var strServerURL = "http://r32-xp-81vmd/profile_MyComp_demo/cgi-bin/ChartService/ChartGenerator.aspx";
var strServerURL = "http://10.240.32.252/profile_atht/ChartService/ChartGenerator.aspx";
//var strServerURL = "http://r32-xp-81vmd/ChartService/ChartGenerator.aspx";
//Default color if no characters are entered in Designer for chart color
var defaultColor = "Red";
var PieChartAlt = "Total Compensation Pie Chart";
//These settings govern the height and width of the Dundas pie chart; need to uncomment lines that follow URL generation in XSL
var width = "";
var height = "";



// Internal
var NumData = 0;
var arrData = new Array();
var NumColors = 0;
var arrColors = new Array();

function GetPieChartAlt()
{
	return PieChartAlt;
}



function GetPieHeight()
{
	return height;
}

function GetPieWidth()
{
	return width;
}

function AddDataToPieChart(node)
{
var alltext, parmnodes, dataval;

	alltext = "";
	parmnodes = node.selectNodes(".//subText");
	for (i = 0; i < parmnodes.length; i++)
		alltext  = alltext + parmnodes.item(i).text;
	alltext = alltext.replace(/[^0-9\.]/g, "");
	dataval = parseFloat(alltext);
	if (dataval == NaN || dataval < 1)
		dataval = 0;
	arrData[NumData] = dataval;
	NumData++;
}

function GetPieChartValues()
{
	return arrData.toString();
}

function GetPieChartColors()
{
	return arrColors.toString();
}



//Alternate code for passing color names instead of hex codes
function AddColorToPieChartArray(node)
{
	var parmnodes;
	parmnodes = node.selectSingleNode(".//subText");
	arrColors[NumColors] = ReplacePound(parmnodes.text);
	NumColors++;
	var strColor = parmnodes.text;
	if(strColor.length ==0)
		return defaultColor;
	else
		return parmnodes.text;

}

function ReplacePound(text)
{
	return text.replace(/#/,"0x00");
}


]]></xsl:script>

</xsl:stylesheet>
