<?xml version="1.0" encoding="UTF-8"?>
<ISUI>
	<template name='My.window.TitleBar'>
    		<Border>1</Border>
		<x>3</x>
    		<BorderColor>FF000033</BorderColor>
    		<Width>r6</Width>
		<Height>26</Height>
		<Texture Template='EQ2.window.TitleBar.Texture' />
		<Children>
			<Text Name='Title' template='EQ2.window.TitleBar.title' />
			<Button Name='Minimize' template='EQ2.window.TitleBar.Minimize'>
			</Button>
			<Button Name='Maximize' template='EQ2.window.TitleBar.Maximize'>
			</Button>
			<commandbutton name='Custom Close Button' Template='EQ2.Window.TitleBar.Close'>
				<Command>Script[EQ2Harvest]:End</Command>
			</commandbutton>
		</Children>
	</template>
	<template name='My.window'>
		<Border>1</Border>
		<Resizable>1</Resizable>
		<CloseButton />
		<MinimizeButton />
		<MaximizeButton />
		<TitleBar template='My.window.TitleBar' />
 		<OffsetTitleBarHeight />
		<Client template='EQ2.window.Client' />
		<StorePosition>1</StorePosition>
	</template>

	<!-- Main LGUI -->
	<Window Name='Harvest' template='My.window'>
		<FadeDelay>0</FadeDelay>
		<FadeDuration>200</FadeDuration>
		<FadeAlpha>0</FadeAlpha>
		<X>5%</X>
		<Y>20%</Y>
		<Width>430</Width>
		<Height>420</Height>
		<Client Template='EQ2.Window.Client'>
			<Y>20</Y>
		</Client>
		<StorePosition>1</StorePosition>
		<Title>Automatic Harvest Bot</Title>
		<TitleBar Template='EQ2.Window.TitleBar'>
			<X>0</X>
			<Y>0</Y>
			<Width>100%</Width>
			<Height>20</Height>
			<Children>
				<Text Name='Title' Template='EQ2.Window.TitleBar.Title' />
				<Button Name='Minimize' Template='EQ2.Window.TitleBar.Minimize'>
					<X>r35</X>
					<Width>14</Width>
					<Height>14</Height>
				</Button>
				<commandbutton name='Custom Close Button' Template='EQ2.Window.TitleBar.Close'>
					<X>r17</X>
					<Width>14</Width>
					<Height>14</Height>
					<Command>Script[EQ2Harvest]:End</Command>
				</commandbutton>
			</Children>
		</TitleBar>
		<Children>
			<Tabcontrol Name='EQ2Harvest Tabs' Template='EQ2.Tabcontrol'>
				<X>1%</X>
				<Y>1%</Y>
				<Height>98%</Height>
				<Width>98%</Width>
				<Tabs>
					<Tab Name='Main'>
						<Text name='Destination Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>10</Y>
							<Width>80%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFFFFFE5</Color>
							</Font>
							<Text>Current Destination:</Text>
						</Text>
						<Text name='Destination' Template='EQ2.text'>
							<X>45%</X>
							<Y>10</Y>
							<Width>50%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFAAFF65</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.FinishPoint}</Text>
						</Text>
						<Text name='Target Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>30</Y>
							<Width>50%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFFFFFE5</Color>
							</Font>
							<Text>Action:</Text>
						</Text>
						<Text name='Target Action' Template='EQ2.text'>
							<X>19%</X>
							<Y>30</Y>
							<Width>100%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFAAFF65</Color>
							</Font>
							<Text>${Script[EQ2Harvest].Variable[CurrentAction]}</Text>
						</Text>
						<checkbox Name='Ore' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>50</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Ore</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[1]}
								{
									UIElement[Ore@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Ore@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[1]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[1]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Ore,${Script[EQ2Harvest].VariableScope.HarvestNode[1]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text name='Ore Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>54</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[1]}</Text>
						</Text>
						<Text Name='Ore Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>51</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[1]</OnLoad>
						</Text>
						<Commandbutton name='Ore Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>50</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 1]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Ore Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>50</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[1]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Stone' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>70</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Stone</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[2]}
								{
									UIElement[Stone@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Stone@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[2]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[2]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Stone,${Script[EQ2Harvest].VariableScope.HarvestNode[2]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Stone Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>74</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[2]}</Text>
						</Text>
						<Text Name='Stone Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>71</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[2]</OnLoad>
						</Text>
						<Commandbutton name='Stone Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>70</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 2]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Stone Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>70</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[2]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Wood' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>90</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Wood</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[3]}
								{
									UIElement[Wood@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Wood@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[3]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[3]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Wood,${Script[EQ2Harvest].VariableScope.HarvestNode[3]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Wood Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>94</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[3]}</Text>
						</Text>
						<Text Name='Wood Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>91</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[3]</OnLoad>
						</Text>
						<Commandbutton name='Wood Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>90</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 3]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Wood Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>90</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[3]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Roots' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>110</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Roots</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[4]}
								{
									UIElement[Roots@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Roots@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[4]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[4]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Roots,${Script[EQ2Harvest].VariableScope.HarvestNode[4]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Roots Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>114</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[4]}</Text>
						</Text>
						<Text Name='Roots Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>111</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[4]</OnLoad>
						</Text>
						<Commandbutton name='Roots Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>110</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 4]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Roots Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>110</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[4]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Pelts' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>130</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Pelts</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[5]}
								{
									UIElement[Pelts@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Pelts@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[5]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[5]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Pelts,${Script[EQ2Harvest].VariableScope.HarvestNode[5]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Pelts Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>134</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[5]}</Text>
						</Text>
						<Text Name='Pelts Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>131</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[5]</OnLoad>
						</Text>
						<Commandbutton name='Pelts Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>130</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 5]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Pelts Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>130</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[5]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Shrubs' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>150</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Shrubs</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[6]}
								{
									UIElement[Shrubs@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Shrubs@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[6]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[6]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Shrubs,${Script[EQ2Harvest].VariableScope.HarvestNode[6]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text name='Shrubs Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>154</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[6]}</Text>
						</Text>
						<Text Name='Shrubs Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>151</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[6]</OnLoad>
						</Text>
						<Commandbutton name='Shrubs Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>150</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 6]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Shrubs Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>150</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[6]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Fish' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>170</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Fish</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[7]}
								{
									UIElement[Fish@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Fish@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[7]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[7]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Fish,${Script[EQ2Harvest].VariableScope.HarvestNode[7]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Fish Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>174</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[7]}</Text>
						</Text>
						<Text Name='Fish Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>171</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[7]</OnLoad>
						</Text>
						<Commandbutton name='Fish Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>170</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 7]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Fish Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>170</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[7]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Collectibles(?)' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>190</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Collectibles (?)</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[8]}
								{
									UIElement[Collectibles(?)@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Collectibles(?)@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[8]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[8]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Collectibles(?),${Script[EQ2Harvest].VariableScope.HarvestNode[8]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Collectibles(?) Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>194</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[8]}</Text>
						</Text>
						<Text Name='Collectibles(?) Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>191</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[8]</OnLoad>
						</Text>
						<Commandbutton name='Collectibles(?) Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>190</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 8]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Collectibles(?) Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>190</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[8]
							</OnLeftClick>
						</Commandbutton>
						<checkbox Name='Collectibles(!)' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>210</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Collectibles (!)</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.HarvestNode[9]}
								{
									UIElement[Collectibles(!)@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Collectibles(!)@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[9]:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.HarvestNode[9]:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[What Nodes to Harvest?]:Set[Collectibles(!),${Script[EQ2Harvest].VariableScope.HarvestNode[9]}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Collectibles(!) Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>214</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FF22FF22</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.HarvestStat[9]}</Text>
						</Text>
						<Text Name='Collectibles(!) Status' Template='EQ2.text'>
							<X>45%</X>
							<Y>211</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<OnLoad>Script[EQ2Harvest].VariableScope.Harvest:CheckStatus[9]</OnLoad>
						</Text>
						<Commandbutton name='Collectibles(!) Keep' Template='EQ2.Commandbutton'> 
							<X>66%</X> 
							<Y>210</Y> 
							<Width>13%</Width> 
							<Height>20</Height>
							<Text>Keep</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:QueueCommand[call UpdateKeep 9]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Collectibles(!) Destroy' Template='EQ2.Commandbutton'> 
							<X>81%</X> 
							<Y>210</Y> 
							<Width>15%</Width> 
							<Height>20</Height>
							<Text>Destroy</Text>
							<OnLeftClick>
								Script[EQ2Harvest].VariableScope.Harvest:UpdateDestroy[9]
							</OnLeftClick>
						</Commandbutton>
						<Text Name='Total Text' Template='EQ2.text'>
							<X>9%</X>
							<Y>241</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Total Harvests:</Text>
							<AutoTooltip>
								Total resources harvested by the bot
							</AutoTooltip>
						</Text>
						<Text Name='Total Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>244</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFFFAD00</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.TotalStat}</Text>
						</Text>
						<Text Name='Batch Count' Template='EQ2.text'>
							<X>45%</X>
							<Y>244</Y>
							<Width>55%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>(Batch Count: ${Script[EQ2Harvest].VariableScope.BatchCount} / ${Script[EQ2Harvest].VariableScope.DestroyBatch})</Text>
							<AutoTooltip>
								This is how many items remain to be harvested
								before extras are destroyed (see options)
							</AutoTooltip>
						</Text>
						<checkbox Name='DestroyMeat' Template='EQ2.checkbox'>
							<X>45%</X>
							<Y>264</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Destroy All Meat</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.DestroyMeat}
								{
									UIElement[DestroyMeat@Main@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[DestroyMeat@Main@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.DestroyMeat:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.DestroyMeat:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Destroy All Meat?,${Script[EQ2Harvest].VariableScope.DestroyMeat}]:Save
							</OnLeftClick>
							<AutoTooltip>
								When this box is checked, any harvested items containing "meat"
								in the name will be destroyed regardless of the settings above
							</AutoTooltip>
						</checkbox>
						<Text Name='Imbue Text' Template='EQ2.text'>
							<X>9%</X>
							<Y>261</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Imbue Stones:</Text>
							<AutoTooltip>
								Total imbue stones harvested by the bot
							</AutoTooltip>
						</Text>
						<Text Name='Imbue Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>264</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFFFFF10</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.ImbueStat}</Text>
						</Text>
						<Text Name='Rare Text' Template='EQ2.text'>
							<X>9%</X>
							<Y>281</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Rares:</Text>
							<AutoTooltip>
								Total rare resources harvested by the bot
							</AutoTooltip>
						</Text>
						<Text Name='Rare Stat' Template='EQ2.text'>
							<X>33%</X>
							<Y>284</Y>
							<Width>40</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFFFFF10</Color>
								<Bold/>
							</Font>
							<Text>${Script[EQ2Harvest].VariableScope.RareStat}</Text>
						</Text>
						<Text Name='Time Elapsed Text' Template='EQ2.text'>
							<X>30%</X>
							<Y>300</Y>
							<Width>60%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Time Elapsed:         (minutes)</Text>
							<AutoTooltip>
								This indicates how long the bot has been running
							</AutoTooltip>

						</Text>
						<Text Name='Time Elapsed' Template='EQ2.text'>
							<X>50%</X>
							<Y>302</Y>
							<Height>20</Height>
							<Width>20%</Width>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFAAFF65</Color>
								<Bold/>
							</Font>
							<Text>${If[${Script[EQ2Harvest].VariableScope.StartTimer},${Math.Calc[(${Time.Timestamp}-${Script[EQ2Harvest].VariableScope.StartTimer})/60].Int},0]}</Text>
						</Text>
						<Text Name='Time Remaining Text' Template='EQ2.text'>
							<X>20%</X>
							<Y>320</Y>
							<Width>80%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Font>
								<Color>FFFF00FF</Color>
							</Font>
							<Text>${If[${Script[EQ2Harvest].VariableScope.StartHarvest}&amp;&amp;${Script[EQ2Harvest].VariableScope.TimerOn},Harvesting will end in ${Math.Calc[1+${Script[EQ2Harvest].VariableScope.HarvestTime}-(${Time.Timestamp}-${Script[EQ2Harvest].VariableScope.StartTimer})/60].Int} minutes,]}</Text>
						</Text>
						<Commandbutton name='Quit Harvest' Template='EQ2.Commandbutton'> 
							<X>27%</X> 
							<Y>345</Y> 
							<Width>15%</Width> 
							<Height>25</Height>
							<Text>Quit</Text>
							<OnLeftClick>
								Script[EQ2Harvest]:End
							</OnLeftClick>
							<AutoTooltip>
								Close this window and end the script
							</AutoTooltip>
						</Commandbutton>
						<Commandbutton name='Start Harvest' Template='EQ2.Commandbutton'> 
							<X>50%</X> 
							<Y>345</Y> 
							<Width>25%</Width> 
							<Height>25</Height>
							<Text>Start Harvesting</Text>
							<OnLeftClick>
								if ${Script[EQ2Harvest].VariableScope.PauseHarvest}
								{
									Script[EQ2Harvest].VariableScope.PauseHarvest:Set[FALSE]
									UIElement[Start Harvest@Main@EQ2Harvest Tabs@Harvest]:SetText[Resume Harvesting]
									Script[EQ2Harvest].VariableScope.StartHarvest:Set[FALSE]
									Script[EQ2Harvest].VariableScope.CurrentAction:Set[Waiting to Resume...]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.PauseHarvest:Set[TRUE]
									UIElement[Start Harvest@Main@EQ2Harvest Tabs@Harvest]:SetText[Pause Harvesting]
									Script[EQ2Harvest].VariableScope.StartHarvest:Set[TRUE]
									Script[EQ2Harvest].VariableScope.CurrentAction:Set[Resuming...]
								}
							</OnLeftClick>
							<AutoTooltip>
								Start or pause the bot
							</AutoTooltip>
						</Commandbutton>
					</Tab>
					<Tab Name='Options'>
						<Text Name='Zone Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>10</Y>
							<Width>100%</Width>
							<Height>20</Height>
							<Font>
								<Color>FFFFFF10</Color>
								<Bold/>
							</Font>
							<Text>Current Zone: ${Zone.Name}</Text>
						</Text>
						<Text Name='Start Location Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>25</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>* Starting Location:</Text>
						</Text>
						<combobox name='Start Location' Template='EQ2.Combobox'>
							<X>32%</X>
							<Y>25</Y>
							<Width>63%</Width>
							<Height>20</Height>
							<Items></items>
							<Onload>
								This:AddItem[${Script[EQ2Harvest].Variable[StartPoint]}]
								This.Item[1]:Select
							</OnLoad>
							<OnSelect>
								Script[EQ2Harvest].Variable[StartPoint]:Set[${This.SelectedItem.Text}]
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}]:Set[Starting Point,${This.SelectedItem.Text}]:Save
							</OnSelect>
						</combobox>
						<Text Name='Finish Location Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>45</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>* Finish Location:</Text>
						</Text>
						<combobox name='Finish Location' Template='EQ2.Combobox'>
							<X>32%</X>
							<Y>45</Y>
							<Width>63%</Width>
							<Height>20</Height>
							<Items></items>
							<Onload>
								This:AddItem[${Script[EQ2Harvest].Variable[FinishPoint]}]
								This.Item[1]:Select
							</OnLoad>
							<OnSelect>
								Script[EQ2Harvest].Variable[FinishPoint]:Set[${This.SelectedItem.Text}]
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}]:Set[Finishing Point,${This.SelectedItem.Text}]:Save
							</OnSelect>
						</combobox>
						<Text Name='Path Route Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>65</Y>
							<Width>25%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>* Pathing Route:</Text>
						</Text>
						<checkbox Name='Path Route 1' Template='EQ2.checkbox'>
							<X>28%</X>
							<Y>63</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>One way</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].Variable[PathRoute]}==1
								{
									UIElement[Path Route 1@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[Path Route 1@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								UIElement[Path Route 2@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								UIElement[Path Route 3@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set["Pathing Route (1=1 way, 2=To and Back, 3=Continous loop",1]:Save
								Script[EQ2Harvest].VariableScope.PathRoute:Set[1]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='Path Route 2' Template='EQ2.checkbox'>
							<X>46%</X>
							<Y>63</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>To and Back</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].Variable[PathRoute]}==2
								{
									UIElement[Path Route 2@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[Path Route 1@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								UIElement[Path Route 2@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								UIElement[Path Route 3@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set["Pathing Route (1=1 way, 2=To and Back, 3=Continous loop",2]:Save
								Script[EQ2Harvest].VariableScope.PathRoute:Set[2]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='Path Route 3' Template='EQ2.checkbox'>
							<X>69%</X>
							<Y>63</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Continous Loop</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].Variable[PathRoute]}==3
								{
									UIElement[Path Route 3@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[Path Route 1@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								UIElement[Path Route 2@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								UIElement[Path Route 3@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set["Pathing Route (1=1 way, 2=To and Back, 3=Continous loop",3]:Save
								Script[EQ2Harvest].VariableScope.PathRoute:Set[3]
							</OnLeftClick>
						</checkbox>
						<Text Name='Roaming Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>85</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>* Roaming Range:</Text>
							<AutoTooltip>
								How close a node must be to the harvesting path for the
								bot to attempt to harvest it.
							</AutoTooltip>
						</Text>
						<Textentry Name='Roaming Range' Template='EQ2.textentry'>
							<X>66%</X>
							<Y>85</Y>
							<Width>8%</Width>
							<Height>15</Height>
							<MaxLength>4</MaxLength>
							<OnLoad>This:SetText[${Script[EQ2Harvest].Variable[MaxRoaming]}]</OnLoad>
							<OnChange>
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}]:Set[Roaming Value,${This.Text}]:Save
								This:SetText[${SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}].GetInt[Roaming Value]}]
								Script[EQ2Harvest].Variable[MaxRoaming]:Set[${This.Text}]
							</OnChange>
						</Textentry>
						<Text Name='Roam Out Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>105</Y>
							<Width>80%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>* Distance outside the Max Roaming Range:</Text>
							<AutoTooltip>
								How close a node must be to the bot to override the above setting
								(this lets you harvest nodes outside of your normal path "since
								you're already there")
							</AutoTooltip>
						</Text>
						<Textentry Name='External Roaming Value' Template='EQ2.textentry'>
							<X>66%</X>
							<Y>105</Y>
							<Width>8%</Width>
							<Height>15</Height>
							<MaxLength>4</MaxLength>
							<OnLoad>This:SetText[${Script[EQ2Harvest].Variable[HarvestClose]}]</OnLoad>
							<OnChange>
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}]:Set[Distance for the bot to move outside the max roaming range?,${This.Text}]:Save
								This:SetText[${SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}].GetInt[Distance for the bot to move outside the max roaming range?]}]
								Script[EQ2Harvest].Variable[HarvestClose]:Set[${This.Text}]
							</OnChange>
						</Textentry>
						<Text Name='Filter Y Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>125</Y>
							<Width>80%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>* Distance to filter Y axis:</Text>
							<AutoTooltip>
								Nodes greater than this distance along the Y (vertical)
								axis from the bot will not be harvested
							</AutoTooltip>
						</Text>
						<Textentry Name='Filter Y Value' Template='EQ2.textentry'>
							<X>66%</X>
							<Y>125</Y>
							<Width>8%</Width>
							<Height>15</Height>
							<MaxLength>4</MaxLength>
							<OnLoad>This:SetText[${Script[EQ2Harvest].Variable[FilterY]}]</OnLoad>
							<OnChange>
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}]:Set[What distance along Y axis should the bot ignore nodes?,${This.Text}]:Save
								This:SetText[${SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[${Zone.ShortName}].GetInt[What distance along Y axis should the bot ignore nodes?]}]
								Script[EQ2Harvest].Variable[FilterY]:Set[${This.Text}]
							</OnChange>
						</Textentry>
						<checkbox Name='Harvest Timer Check' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>150</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Use Harvest Timer:              (minutes)</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].Variable[TimerOn]}
								{
									UIElement[Harvest Timer Check@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Harvest Timer Check@Options@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.TimerOn:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.TimerOn:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Is Harvest Timer On?,${Script[EQ2Harvest].VariableScope.TimerOn}]:Save
							</OnLeftClick>
							<AutoTooltip>
								Enabling this option will cause the harvesting session to
								end after the time specified has elapsed
							</AutoTooltip>
						</checkbox>
						<Textentry Name='Harvest Timer' Template='EQ2.textentry'>
							<X>37%</X>
							<Y>152</Y>
							<Width>10%</Width>
							<Height>15</Height>
							<MaxLength>5</MaxLength>
							<OnLoad>This:SetText[${Script[EQ2Harvest].Variable[HarvestTime]}]</OnLoad>
							<OnChange>
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Harvest Timer,${This.Text}]:Save
								This:SetText[${SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Harvest Timer]}]
								Script[EQ2Harvest].Variable[HarvestTime]:Set[${This.Text}]
							</OnChange>
						</Textentry>
						<Text Name='Quit Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>170</Y>
							<Width>50%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>* When timer expires:</Text>
							<AutoTooltip>
								Decide whether you'd like to leave the game completely
								or just end the script when the harvest timer elapses.
							</AutoTooltip>
						</Text>
						<checkbox Name='End Script Option' Template='EQ2.checkbox'>
							<X>51%</X>
							<Y>168</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>End Script</Text>
							<OnLoad>
								if !${Script[EQ2Harvest].Variable[HowtoQuit]}
								{
									UIElement[End Script Option@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[End Script Option@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								UIElement[Camp Desktop Option@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[0-end script or 1-Camp to desktop,0]:Save
								Script[EQ2Harvest].VariableScope.HowtoQuit:Set[0]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='Camp Desktop Option' Template='EQ2.checkbox'>
							<X>71%</X>
							<Y>168</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Camp to Desktop</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].Variable[HowtoQuit]}
								{
									UIElement[Camp Desktop Option@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[Camp Desktop Option@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								UIElement[End Script Option@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[0-end script or 1-Camp to desktop,1]:Save
								Script[EQ2Harvest].VariableScope.HowtoQuit:Set[1]
							</OnLeftClick>
						</checkbox>
						<Text Name='Destroy Batch Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>200</Y>
							<Width>68%</Width>
							<Height>20</Height>
							<Text>* Items to harvest between inventory cleanups:</Text>
							<AutoTooltip>
								This is how many total items must be harvested
								before extras are destroyed.  (Which may take
								several seconds with full bags)
							</AutoTooltip>
						</Text>
						<Textentry Name='Destroy Batch' Template='EQ2.textentry'>
							<X>75%</X>
							<Y>199</Y>
							<Width>10%</Width>
							<Height>15</Height>
							<MaxLength>5</MaxLength>
							<OnLoad>This:SetText[${Script[EQ2Harvest].Variable[DestroyBatch]}]</OnLoad>
							<OnChange>
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Nodes to Harvest before Destroying?,${This.Text}]:Save
								This:SetText[${SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Nodes to Harvest before Destroying?]}]
								Script[EQ2Harvest].Variable[DestroyBatch]:Set[${This.Text}]
							</OnChange>
						</Textentry>
						<Checkbox name='Fade' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>230</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Autohide this window on mouse out</Text>
							<OnLoad>
								if ${SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings].GetString[Fade Window?,FALSE]}
								{
									This:SetChecked
									timedcommand 3 UIElement[Harvest]:SetFadeDelay[500]
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[Harvest]:SetFadeDelay[${If[${This.Checked},500,0]}]
								UIElement[Harvest]:ResetFade
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Fade Window?,${This.Checked}]:Save
							</OnLeftClick>
						</Checkbox>
						<checkbox Name='Intruder Detect' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>260</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Detect BOT Police following you</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].Variable[IntruderDetect]}
								{
									UIElement[Intruder Detect@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Intruder Detect@Options@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.IntruderDetect:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.IntruderDetect:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to detect for BOT POLICE following YOU?,${Script[EQ2Harvest].VariableScope.IntruderDetect}]:Save
							</OnLeftClick>
						</checkbox>
						<Text Name='Intruder Action Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>280</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>* If Intruder detected:</Text>
						</Text>
						<checkbox Name='Stand There' Template='EQ2.checkbox'>
							<X>35%</X>
							<Y>278</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Stand there</Text>
							<OnLoad>
								if !${Script[EQ2Harvest].Variable[IntruderAction]}
								{
									UIElement[Stand There@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[Stand There@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								UIElement[Keep Moving@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[If intruder detected - Stand there (0) or (1) keep moving till he goes?,0]:Save
								Script[EQ2Harvest].VariableScope.IntruderAction:Set[0]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='Keep Moving' Template='EQ2.checkbox'>
							<X>58%</X>
							<Y>278</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>keep moving till he goes</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].Variable[IntruderAction]}
								{
									UIElement[Keep Moving@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								UIElement[Keep Moving@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								UIElement[Stand There@Options@EQ2Harvest Tabs@Harvest]:UnsetChecked
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[If intruder detected - Stand there (0) or (1) keep moving till he goes?,1]:Save
								Script[EQ2Harvest].VariableScope.IntruderAction:Set[1]
							</OnLeftClick>
						</checkbox>
						<Text Name='Node Delay Text' Template='EQ2.text'>
							<X>5%</X>
							<Y>320</Y>
							<Width>90%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>* Maximum Random Delay between Nodes:              (seconds)</Text>
							<AutoTooltip>
								When set, the bot will wait for a random amount of time before
								looking for the next node after harvesting.  (So that it looks
								less "bot-like")
							</AutoTooltip>
						</Text>
						<Textentry Name='Node Delay' Template='EQ2.textentry'>
							<X>66%</X>
							<Y>320</Y>
							<Width>10%</Width>
							<Height>15</Height>
							<MaxLength>5</MaxLength>
							<OnLoad>This:SetText[${Script[EQ2Harvest].Variable[NodeDelay]}]</OnLoad>
							<OnChange>
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Maximum Random Delay between Nodes?,${This.Text}]:Save
								This:SetText[${SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Maximum Random Delay between Nodes?]}]
								Script[EQ2Harvest].Variable[NodeDelay]:Set[${This.Text}]
							</OnChange>
						</Textentry>
						<checkbox Name='Sprint Between Nodes' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>340</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Sprint from node to node</Text>
							<OnLoad>
								if ${Script[EQ2Harvest].VariableScope.UseSprint}
								{
									UIElement[Sprint Between Nodes@Options@EQ2Harvest Tabs@Harvest]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Sprint Between Nodes@Options@EQ2Harvest Tabs@Harvest].Checked}
								{
									Script[EQ2Harvest].VariableScope.UseSprint:Set[TRUE]
								}
								else
								{
									Script[EQ2Harvest].VariableScope.UseSprint:Set[FALSE]
								}
								SettingXML[Scripts/EQ2Harvest/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Sprint between nodes?,${Script[EQ2Harvest].VariableScope.UseSprint}]:Save
							</OnLeftClick>
							<AutoTooltip>
								When this box is checked, the bot will activate your sprint
								ability while running from node to node if your power is over 80%
							</AutoTooltip>
						</checkbox>
					</Tab>
				</Tabs>
			</Tabcontrol>
		</Children>
	</Window>
</ISUI>

