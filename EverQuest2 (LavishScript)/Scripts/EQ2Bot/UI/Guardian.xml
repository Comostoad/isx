<?xml version="1.0" encoding="UTF-8" ?>
<ISUI>
	<Commandcheckbox Name='OffensiveMode' Template='EQ2.Commandcheckbox'>
		<X>10</X>
		<Y>10</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Enable Offensive Mode</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[OffensiveMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast Offensive Spells",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[OffensiveMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast Offensive Spells",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Cast Offensive Spells]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='DefensiveMode' Template='EQ2.Commandcheckbox'>
		<X>10</X>
		<Y>30</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Enable Defensive Mode</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[DefensiveMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast Defensive Spells",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[DefensiveMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast Defensive Spells",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Cast Defensive Spells]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='AoEMode' Template='EQ2.Commandcheckbox'>
		<X>10</X>
		<Y>50</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Enable AoE Mode</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[AoEMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast AoE Spells",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[AoEMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast AoE Spells",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Cast AoE Spells]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='PBAoEMode' Template='EQ2.Commandcheckbox'>
		<X>10</X>
		<Y>70</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Enable PBAoE Mode</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[PBAoEMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast PBAoE Spells",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[PBAoEMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast PBAoE Spells",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Cast PBAoE Spells]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='Full Auto Mode' Template='EQ2.Commandcheckbox'>
		<Visible>1</Visible>
		<X>10</X>
		<Y>90</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Full Auto Mode:</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[FullAutoMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Full Auto Mode",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[FullAutoMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Full Auto Mode",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Full Auto Mode]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='Taunt Mode' Template='EQ2.Commandcheckbox'>
		<Visible>1</Visible>
		<X>10</X>
		<Y>110</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Taunt Mode:</Text>
		<OnLeftClick>
			if ${This.Checked}
			{

				Script[EQ2Bot].Variable[TauntMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast Taunt Spells",TRUE]:Save
			}
			else
			{

				Script[EQ2Bot].Variable[TauntMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Cast Taunt Spells",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Cast Taunt Spells]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='cbDragoonsCyclone' Template='EQ2.Commandcheckbox'>
		<Visible>1</Visible>
		<X>10</X>
		<Y>130</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Buff Dragoon's Cyclone:</Text>
		<OnLeftClick>
			if ${This.Checked}
			{

				Script[EQ2Bot].Variable[DragoonsCycloneMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Buff Dragoons Cyclone",TRUE]:Save
			}
			else
			{

				Script[EQ2Bot].Variable[DragoonsCycloneMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Buff Dragoons Cyclone",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Buff Dragoons Cyclone]}</Data>
	</Commandcheckbox>
	<Text Name='lblMainWeapon' Template='EQ2.text'>
		<X>10</X>
		<Y>150</Y>
		<Width>20%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Main Hand:</Text>
		<AutoTooltip>Main Hand weapon to equip when not using an AA weapon</AutoTooltip>
	</Text>
	<combobox name='cbMainWeapon' Template='EQ2.Combobox'>
		<x>100</x>
		<y>150</y>
		<width>30%</width>
		<height>20</height>
		<OnLeftClick>
			declare Counter int
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].Type.Equal[Weapon]}
				{
					This:AddItem["${Me.CustomInventory[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].Type.Equal[Weapon]}
				{
					This:AddItem["${Me.Equipment[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem["${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Main]}"]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Main]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[WeaponMain]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[Main,"${This.SelectedItem.Text}"]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblOffHand' Template='EQ2.text'>
		<X>10</X>
		<Y>170</Y>
		<Width>20%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Off Hand:</Text>
		<AutoTooltip>Off hand item to equip when not using an AA off hand item</AutoTooltip>
	</Text>
	<combobox name='cbOffHand' Template='EQ2.Combobox'>
		<x>100</x>
		<y>170</y>
		<width>30%</width>
		<height>20</height>
		<AutoTooltip>Off hand item to equip when not using an AA off hand item</AutoTooltip>
		<OnLeftClick>
			declare Counter int
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].Type.Equal[Shield]} || ${Me.CustomInventory[${Counter}].Type.Equal[Weapon]}
				{
					This:AddItem["${Me.CustomInventory[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].Type.Equal[Shield]} || ${Me.Equipment[${Counter}].Type.Equal[Weapon]}
				{
					This:AddItem["${Me.Equipment[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem["${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[OffHand]}"]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[OffHand]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[OffHand]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[OffHand,"${This.SelectedItem.Text}"]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblAxe' Template='EQ2.text'>
		<X>10</X>
		<Y>190</Y>
		<Width>20%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>AA Axe:</Text>
		<AutoTooltip>Weapon to use during Axe required AA skills</AutoTooltip>
	</Text>
	<combobox name='cbAxe' Template='EQ2.Combobox'>
		<x>100</x>
		<y>190</y>
		<width>30%</width>
		<height>20</height>
		<OnLeftClick>
			declare Counter int
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].SubType.Equal[Axe]} || ${Me.CustomInventory[${Counter}].SubType.Equal[Great Axe]}
				{
					This:AddItem["${Me.CustomInventory[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].SubType.Equal[Axe]} || ${Me.Equipment[${Counter}].SubType.Equal[Great Axe]}
				{
					This:AddItem["${Me.Equipment[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem["${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Axe]}"]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Axe]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[WeaponAxe]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[Axe,"${This.SelectedItem.Text}"]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblSword' Template='EQ2.text'>
		<X>10</X>
		<Y>210</Y>
		<Width>20%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>AA Sword:</Text>
		<AutoTooltip>Weapon to use during Sword required AA skills</AutoTooltip>
	</Text>
	<combobox name='cbSword' Template='EQ2.Combobox'>
		<x>100</x>
		<y>210</y>
		<width>30%</width>
		<height>20</height>
		<OnLeftClick>
			declare Counter int
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].SubType.Equal[Sword]} || ${Me.CustomInventory[${Counter}].SubType.Equal[Great Sword]}
				{
					This:AddItem["${Me.CustomInventory[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].SubType.Equal[Sword]} || ${Me.Equipment[${Counter}].SubType.Equal[Great Sword]}
				{
					This:AddItem["${Me.Equipment[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem["${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Sword]}"]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Sword]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[WeaponSword]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[Sword,"${This.SelectedItem.Text}"]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblHammer' Template='EQ2.text'>
		<X>10</X>
		<Y>230</Y>
		<Width>20%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>AA Hammer:</Text>
		<AutoTooltip>Weapon to use during Hammer required AA skills</AutoTooltip>
	</Text>
	<combobox name='cbHammer' Template='EQ2.Combobox'>
		<x>100</x>
		<y>230</y>
		<width>30%</width>
		<height>20</height>
		<OnLeftClick>
			declare Counter int
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].SubType.Equal[Hammer]} || ${Me.CustomInventory[${Counter}].SubType.Equal[Great Hammer]} || ${Me.CustomInventory[${Counter}].SubType.Equal[Mace]}
				{
					This:AddItem["${Me.CustomInventory[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].SubType.Equal[Hammer]} || ${Me.Equipment[${Counter}].SubType.Equal[Great Hammer]} || ${Me.Equipment[${Counter}].SubType.Equal[Mace]}
				{
					This:AddItem["${Me.Equipment[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem["${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Hammer]}"]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Hammer]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[WeaponHammer]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[Hammer,"${This.SelectedItem.Text}"]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblTowerShield' Template='EQ2.text'>
		<X>10</X>
		<Y>250</Y>
		<Width>20%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>TowerShield for Tower of Stone:</Text>
		<AutoTooltip>TowerShield to use during required spells</AutoTooltip>
	</Text>
	<combobox name='cbTowerShield' Template='EQ2.Combobox'>
		<x>100</x>
		<y>250</y>
		<width>30%</width>
		<height>20</height>
		<AutoTooltip>TowerShield to use during TowerShield required spells</AutoTooltip>
		<OnLeftClick>
			declare Counter int
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].SubType.Equal[Tower]}
				{
					This:AddItem["${Me.CustomInventory[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].SubType.Equal[Tower]}
				{
					This:AddItem["${Me.Equipment[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem["${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[TowerShield]}"]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[TowerShield]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[TowerShield]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[TowerShield,"${This.SelectedItem.Text}"]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblSpear' Template='EQ2.text'>
		<X>10</X>
		<Y>270</Y>
		<Width>20%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>AA Spear:</Text>
		<AutoTooltip>Weapon to use during Spear required AA skills</AutoTooltip>
	</Text>
	<combobox name='cbSpear' Template='EQ2.Combobox'>
		<x>100</x>
		<y>270</y>
		<width>30%</width>
		<height>20</height>
		<AutoTooltip>Weapon to use during Spear required AA skills</AutoTooltip>
		<OnLeftClick>
			declare Counter int
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if (${Me.CustomInventory[${Counter}].SubType.Equal[Great Spear]} || ${Me.CustomInventory[${Counter}].SubType.Equal[Spear]})
				{
					This:AddItem["${Me.CustomInventory[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if (${Me.Equipment[${Counter}].SubType.Equal[Great Spear]} || ${Me.Equipment[${Counter}].SubType.Equal[Spear]})
				{
					This:AddItem["${Me.Equipment[${Counter}].Name}"]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem["${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Spear]}"]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Spear]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[WeaponSpear]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[Spear,"${This.SelectedItem.Text}"]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblBuffAvoidanceGroupMember' Template='EQ2.text'>
			<X>375</X>
			<Y>10</Y>
			<Width>20%</Width>
			<Height>20</Height>
			<Alignment>Left</Alignment>
			<Text>Buff Avoidance:</Text>
			<AutoTooltip></AutoTooltip>
		</Text>
		<combobox name='cbBuffAvoidanceGroupMember' Template='EQ2.Combobox'>
			<x>375</x>
			<y>30</y>
			<Width>100</width>
			<Height>20</height>
			<AutoTooltip>The Group Member to Avoidance Buff</AutoTooltip>
			<Items></items>
			<OnLoad>
				This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[BuffAvoidanceGroupMember]}]
				This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[BuffAvoidanceGroupMember]}]:Select
			</OnLoad>
			<OnSelect>
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[BuffAvoidanceGroupMember,${This.SelectedItem.Text}]:Save</OnSelect>
			<OnLeftClick>
				declare tmpvar int

				This:ClearItems
				tmpvar:Set[1]
				This:AddItem[${Me.Name}:${Me.ToActor.Type}]
				if ${Me.ToActor.Pet(exists)}
				{
					This:AddItem[${Me.ToActor.Pet.Name}:${Me.ToActor.Pet.Type}]
				}
				do
				{
					if ${Me.Grouped}
					{
						if ${Me.Group[${tmpvar}].ToActor(exists)}
						{
							This:AddItem[${Me.Group[${tmpvar}].Name}:${Me.Group[${tmpvar}].ToActor.Type}]
						}
						if (${Me.Group[${tmpvar}].Class.Equal[conjuror]} || ${Me.Group[${tmpvar}].Class.Equal[necromancer]})  &amp;&amp; ${Me.Group[${tmpvar}].ToActor.Pet(exists)}
						{
							This:AddItem[${Me.Group[${tmpvar}].ToActor.Pet}:${Me.Group[${tmpvar}].ToActor.Pet.Type}]
						}

					}

				}
				while ${tmpvar:Inc}&lt;=5
			</OnLeftClick>
		</combobox>
	<Text Name='lblBuffSentinelGroupMember' Template='EQ2.text'>
			<X>375</X>
			<Y>60</Y>
			<Width>20%</Width>
			<Height>20</Height>
			<Alignment>Left</Alignment>
			<Text>Buff Sentinel Intercept:</Text>
			<AutoTooltip></AutoTooltip>
		</Text>
		<combobox name='cbBuffSentinelGroupMember' Template='EQ2.Combobox'>
			<x>375</x>
			<y>80</y>
			<Width>100</width>
			<Height>20</height>
			<AutoTooltip>The Group Member to Sentinel Intercept</AutoTooltip>
			<Items></items>
			<OnLoad>
				This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[BuffSentinelGroupMember]}]
				This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[BuffSentinelGroupMember]}]:Select
			</OnLoad>
			<OnSelect>
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[BuffSentinelGroupMember,${This.SelectedItem.Text}]:Save</OnSelect>
			<OnLeftClick>
				declare tmpvar int

				This:ClearItems
				tmpvar:Set[1]
				This:AddItem[${Me.Name}:${Me.ToActor.Type}]
				if ${Me.ToActor.Pet(exists)}
				{
					This:AddItem[${Me.ToActor.Pet.Name}:${Me.ToActor.Pet.Type}]
				}
				do
				{
					if ${Me.Grouped}
					{
						if ${Me.Group[${tmpvar}].ToActor(exists)}
						{
							This:AddItem[${Me.Group[${tmpvar}].Name}:${Me.Group[${tmpvar}].ToActor.Type}]
						}
						if (${Me.Group[${tmpvar}].Class.Equal[conjuror]} || ${Me.Group[${tmpvar}].Class.Equal[necromancer]})  &amp;&amp; ${Me.Group[${tmpvar}].ToActor.Pet(exists)}
						{
							This:AddItem[${Me.Group[${tmpvar}].ToActor.Pet}:${Me.Group[${tmpvar}].ToActor.Pet.Type}]
						}

					}

				}
				while ${tmpvar:Inc}&lt;=5
			</OnLeftClick>
	</combobox>
	<Text Name='lblBuffDeagroGroupMember' Template='EQ2.text'>
			<X>375</X>
			<Y>100</Y>
			<Width>20%</Width>
			<Height>20</Height>
			<Alignment>Left</Alignment>
			<Text>Buff Agro Reducer on:</Text>
			<AutoTooltip></AutoTooltip>
		</Text>
		<combobox name='cbBuffDeagroGroupMember' Template='EQ2.Combobox'>
			<x>375</x>
			<y>120</y>
			<Width>100</width>
			<Height>20</height>
			<AutoTooltip>The Group Member to Reduce Agro For</AutoTooltip>
			<Items></items>
			<OnLoad>
				This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[BuffDeagroGroupMember]}]
				This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[BuffDeagroGroupMember]}]:Select
			</OnLoad>
			<OnSelect>
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set[BuffDeagroGroupMember,${This.SelectedItem.Text}]:Save</OnSelect>
			<OnLeftClick>
				declare tmpvar int

				This:ClearItems
				tmpvar:Set[1]
				This:AddItem[${Me.Name}:${Me.ToActor.Type}]
				if ${Me.ToActor.Pet(exists)}
				{
					This:AddItem[${Me.ToActor.Pet.Name}:${Me.ToActor.Pet.Type}]
				}
				do
				{
					if ${Me.Grouped}
					{
						if ${Me.Group[${tmpvar}].ToActor(exists)}
						{
							This:AddItem[${Me.Group[${tmpvar}].Name}:${Me.Group[${tmpvar}].ToActor.Type}]
						}
						if (${Me.Group[${tmpvar}].Class.Equal[conjuror]} || ${Me.Group[${tmpvar}].Class.Equal[necromancer]})  &amp;&amp; ${Me.Group[${tmpvar}].ToActor.Pet(exists)}
						{
							This:AddItem[${Me.Group[${tmpvar}].ToActor.Pet}:${Me.Group[${tmpvar}].ToActor.Pet.Type}]
						}

					}

				}
				while ${tmpvar:Inc}&lt;=5
			</OnLeftClick>
	</combobox>
	<Commandcheckbox Name='StartHO' Template='EQ2.Commandcheckbox'>
		<Visible>1</Visible>
		<X>375</X>
		<Y>140</Y>
		<Width>30%</Width>
		<Height>20</Height>
		<Text>Innitiate HO's</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[StartHO]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Start HOs",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[StartHO]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}]:Set["Start HOs",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[${Me.SubClass}].GetString[Start HOs]}</Data>
	</Commandcheckbox>
</ISUI>