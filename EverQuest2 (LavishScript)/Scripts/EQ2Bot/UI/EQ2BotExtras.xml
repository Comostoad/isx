<?xml version="1.0" encoding="UTF-8" ?>
<ISUI>
	<Commandcheckbox Name='CombatFollow'>
		<X>5%</X>
		<Y>10</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Resume Follow after Combat, Zoning, or Rez ONLY</Text>
		<AutoTooltip>A less persistent version of follow</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[CombatFollow]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["CombatFollow",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[CombatFollow]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["CombatFollow",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[CombatFollow]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='WarnTank'>
		<X>5%</X>
		<Y>30</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Warn Tank When Aggro</Text>
		<AutoTooltip>Select to automatically send a tell to the main tank when you have an npc on you</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[WarnTankWhenAggro]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Warn tank when I have a mob on me",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[WarnTankWhenAggro]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Warn tank when I have a mob on me",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Warn tank when I have a mob on me]}</Data>
	</Commandcheckbox>
	<Text Name='lblOORThreshold'>
		<X>55%</X>
		<Y>10</Y>
		<Width>40%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Out of Range Reaction Distance:</Text>
		<AutoTooltip>When a spell is called and you are out of range of target, the distance to consider safe to move to max cast range.
		if movement is a concern make this 0 to prevent any movement and remain out of cast range.</AutoTooltip>
	</Text>
	<Slider Name='sldOORThreshold'>
		<X>60%</X>
		<Y>30</Y>
		<Width>35%</Width>
		<Border>0</Border>
		<Height>20</Height>
		<Range>75</Range>
		<OnLoad>This:SetValue[${Script[EQ2Bot].Variable[OORThreshold]}]</OnLoad>
		<OnChange>
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Out of Range Reaction Distance,${This.Value}]:Save
			Script[EQ2Bot].Variable[OORThreshold]:Set[${This.Value}]
		</OnChange>
	</Slider>
	<Commandcheckbox Name='Shard'>
		<Visible>1</Visible>
		<X>5%</X>
		<Y>50</Y>
		<Width>80</Width>
		<Height>20</Height>
		<Text>Request Shards From:</Text>
		<AutoTooltip>Select to use Conjuror Shards for power</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[ShardMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Shard Mode",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[ShardMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Shard Mode",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Shard Mode]}</Data>
	</Commandcheckbox>
	<combobox name='ShardGroupMember'>
		<x>155</x>
		<y>50</y>
		<Width>20%</width>
		<Height>20</height>
		<AutoTooltip>The Group Member to request shards from</AutoTooltip>
		<Items></items>
		<OnLoad>
			This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Shard Group Member]}]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Shard Group Member]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[ShardGroupMember]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set[Shard Group Member,${This.SelectedItem.Text}]:Save</OnSelect>
		<OnLeftClick>
			declare tmpvar int

			This:ClearItems
			tmpvar:Set[1]
			if ${Me.InRaid}
			{
				do
				{
					if ${Me.Raid[${tmpvar}](exists)} &amp;&amp; (${Me.Raid[${tmpvar}].Class.Equal[conjuror]} || ${Me.Raid[${tmpvar}].Class.Equal[necromancer]})
					{
						This:AddItem[${Me.Raid[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=24
			}
			else
			{
				do
				{
					if ${Me.Group[${tmpvar}](exists)} &amp;&amp; (${Me.Group[${tmpvar}].Class.Equal[conjuror]} || ${Me.Group[${tmpvar}].Class.Equal[necromancer]})
					{
						This:AddItem[${Me.Group[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=5
			}
		</OnLeftClick>
	</combobox>
	<Commandcheckbox Name='Heart'>
		<Visible>1</Visible>
		<X>5%</X>
		<Y>70</Y>
		<Width>80</Width>
		<Height>20</Height>
		<Text>Request Hearts From:</Text>
		<AutoTooltip>Select to use Necro Hearts for power</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[HeartMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Heart Mode",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[ShardMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Heart Mode",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Heart Mode]}</Data>
	</Commandcheckbox>
	<combobox name='HeartGroupMember'>
		<x>155</x>
		<y>70</y>
		<Width>20%</width>
		<Height>20</height>
		<AutoTooltip>The Group Member to request Hearts from</AutoTooltip>
		<Items></items>
		<OnLoad>
			This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Heart Group Member]}]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Heart Group Member]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[HeartGroupMember]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set[Heart Group Member,${This.SelectedItem.Text}]:Save</OnSelect>
		<OnLeftClick>
			declare tmpvar int

			This:ClearItems
			tmpvar:Set[1]
			if ${Me.InRaid}
			{
				do
				{
					if ${Me.Raid[${tmpvar}](exists)} &amp;&amp; ${Me.Raid[${tmpvar}].Class.Equal[necromancer]}
					{
						This:AddItem[${Me.Raid[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=24
			}
			else
			{
				do
				{
					if ${Me.Group[${tmpvar}](exists)} &amp;&amp; ${Me.Group[${tmpvar}].Class.Equal[necromancer]}
					{
						This:AddItem[${Me.Group[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=5
			}
		</OnLeftClick>
	</combobox>
	<Commandcheckbox Name='DoHOs'>
		<X>5%</X>
		<Y>90</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Participate in HOs</Text>
		<AutoTooltip>Select to advance and complete HOs before casting any other spells</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[DoHOs]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["DoHOs",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[DoHOs]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["DoHOs",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[DoHOs]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='PetGuard'>
		<X>5%</X>
		<Y>110</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Pet Guard Self/Me</Text>
		<AutoTooltip>Select to enable pet guard self and pet guard me after being backed off</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[PetGuard]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["PetGuard",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[PetGuard]:Set[FALSE]
				EQ2Execute /pet backoff
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["PetGuard",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[PetGuard]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='EpicMode'>
		<X>5%</X>
		<Y>130</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Enable Epic Encounter Logic</Text>
		<AutoTooltip>Select to designate to scripts to use Epic battle routines</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[EpicMode]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["EpicMode",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[EpicMode]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["EpicMode",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[EpicMode]}</Data>
	</Commandcheckbox>
	<Commandcheckbox name='Use MP Potions'>
		<X>5%</X>
		<Y>150</Y>
		<Width>100</Width>
		<Height>20</height>
		<Text>Use Potions for Power/Health</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[UsePotions]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Use Potions?",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[UsePotions]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Use Potions?",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Use Potions?]}</Data>
	</Commandcheckbox>
	<Commandcheckbox name='Use Potions'>
		<X>5%</X>
		<Y>170</Y>
		<Width>100</Width>
		<Height>20</height>
		<Text>Use Potions for cures</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[UseCurePotions]:Set[TRUE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Use potions for cures?",TRUE]:Save
			}
			else
			{
				Script[EQ2Bot].Variable[UseCurePotions]:Set[FALSE]
				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Use potions for cures?",FALSE]:Save
			}
		</OnLeftClick>
		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Use potions for cures?]}</Data>
	</Commandcheckbox>
	<Text Name='lblArcane'>
		<X>5%</X>
		<Y>190</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Arcane</Text>
		<AutoTooltip>Potion to use for Arcane</AutoTooltip>
	</Text>
	<combobox name='cbArcane'>
		<x>75</x>
		<y>190</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Arcane</AutoTooltip>
		<OnLeftClick>
			declare Counter int
			declare ArcaneShort string "Arcane Remedy"
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].Name.Right[13].Equal[${ArcaneShort}]}
				{
					This:AddItem[${Me.CustomInventory[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[13].Equal[${ArcaneShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Arcane Potion Name]}]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Arcane Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[ArcanePotion]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set[Arcane Potion Name,${This.SelectedItem.Text}]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblElemental'>
		<X>5%</X>
		<Y>210</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Elemental</Text>
		<AutoTooltip>Potion to use for Elemental</AutoTooltip>
	</Text>
	<combobox name='cbElemental'>
		<x>75</x>
		<y>210</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Elemental</AutoTooltip>
		<OnLeftClick>
			declare Counter int
			declare ElementalShort string "Elemental Remedy"
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].Name.Right[16].Equal[${ElementalShort}]}
				{
					This:AddItem[${Me.CustomInventory[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[16].Equal[${ElementalShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Elemental Potion Name]}]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Elemental Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[ElementalPotion]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set[Elemental Potion Name,${This.SelectedItem.Text}]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblNoxious'>
		<X>5%</X>
		<Y>230</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Noxious</Text>
		<AutoTooltip>Potion to use for Noxious</AutoTooltip>
	</Text>
	<combobox name='cbNoxious'>
		<x>75</x>
		<y>230</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Noxious</AutoTooltip>
		<OnLeftClick>
			declare Counter int
			declare NoxiousShort string "Noxious Remedy"
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].Name.Right[14].Equal[${NoxiousShort}]}
				{
					This:AddItem[${Me.CustomInventory[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[14].Equal[${NoxiousShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Noxious Potion Name]}]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Noxious Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[NoxiousPotion]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set[Noxious Potion Name,${This.SelectedItem.Text}]:Save
		</OnSelect>
	</combobox>
	<Text Name='lblTrauma'>
		<X>5%</X>
		<Y>250</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Trauma</Text>
		<AutoTooltip>Potion to use for Trauma</AutoTooltip>
	</Text>
	<combobox name='cbTrauma'>
		<x>75</x>
		<y>250</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Trauma</AutoTooltip>
		<OnLeftClick>
			declare Counter int
			declare TraumaShort string "Trauma Remedy"
			Counter:Set[1]
			This:ClearItems
			Me:CreateCustomInventoryArray[nonbankonly]
			do
			{
				if ${Me.CustomInventory[${Counter}].Name.Right[13].Equal[${TraumaShort}]}
				{
					This:AddItem[${Me.CustomInventory[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=${Me.CustomInventoryArraySize}
			Counter:Set[1]
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[13].Equal[${TraumaShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Trauma Potion Name]}]
			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Trauma Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[TraumaPotion]:Set[${This.SelectedItem.Text}]
			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set[Trauma Potion Name,${This.SelectedItem.Text}]:Save
		</OnSelect>
	</combobox>
`</ISUI>