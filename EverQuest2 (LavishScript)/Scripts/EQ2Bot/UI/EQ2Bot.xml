<?xml version="1.0" encoding="UTF-8" ?>
<ISUI>
	<template name='My.window.TitleBar'>
    		<Border>1</Border>
		<x>3</x>
    		<BorderColor>FF000033</BorderColor>
    		<Width>r6</Width>
		<Height>26</Height>
		<Texture Template='EQ2.window.TitleBar.Texture' />
		<Children>
			<Text Name='Title' template='EQ2.window.TitleBar.title' />
			<Button Name='Minimize' template='EQ2.window.TitleBar.Minimize'>
			</Button>
			<Button Name='Maximize' template='EQ2.window.TitleBar.Maximize'>
			</Button>
			<commandbutton name='Custom Close Button' Template='EQ2.Window.TitleBar.Close'>
				<Command>Script[EQ2Bot]:End</Command>
			</commandbutton>
		</Children>
	</template>
	<template name='My.window'>
		<Border>1</Border>
		<Resizable>1</Resizable>
		<CloseButton />
		<MinimizeButton />
		<TitleBar template='My.window.TitleBar' />
		<OffsetTitleBarHeight />
		<Client template='EQ2.window.Client' />
		<StorePosition>1</StorePosition>
	</template>
	<Window name='EQ2 Bot' Template='My.Window'>
		<X>10</X>
		<Y>10</Y>
		<Width>500</Width>
		<Height>500</Height>
		<StorePosition>1</StorePosition>
		<Title>EQ2Bot</Title>
		<OnLoad>
		</OnLoad>
		<OnUnload>
		</OnUnload>
		<OnLeftClick>
			This:SetFocus
		</OnLeftClick>
		<OnRender>
			if ${UIElement[EQ2 Bot].Minimized}
			{
				switch ${Time.Second}
				{
				case 10
					UIElement[Title@TitleBar@EQ2 Bot]:SetText[Target: ${Actor[${Script[EQ2Bot].Variable[KillTarget]}].Name}]
					break
				case 20
					UIElement[Title@TitleBar@EQ2 Bot]:SetText[GainedXP: ${Math.Calc[(${Me.Exp}-${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[Temporary Settings].GetFloat[StartXP]})+((${Me.Level}-${Script[EQ2Bot].Variable[StartLevel]})*100)]}]
					break
				case 30
					UIElement[Title@TitleBar@EQ2 Bot]:SetText[XPRate: ${Math.Calc[((${Me.Exp}-${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[Temporary Settings].GetFloat[StartXP]})+((${Me.Level}-${Script[EQ2Bot].Variable[StartLevel]})*100))/(((${Time.Timestamp}+1)-${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[Temporary Settings].GetInt[StartTime]})/3600)]} / hr]
					break
				case 40
					UIElement[Title@TitleBar@EQ2 Bot]:SetText[Runtime: ${Math.Calc[(${Time.Timestamp}-${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[Temporary Settings].GetInt[StartTime]})/60]}]
					break
				case 50
					UIElement[Title@TitleBar@EQ2 Bot]:SetText[EQ2Bot]
					break
				case 59
					UIElement[Title@TitleBar@EQ2 Bot]:SetText[EQ2Bot - ${Me.Name}]
					break

				}
			}
			else
			{
				UIElement[Title@TitleBar@EQ2 Bot]:SetText[EQ2Bot - ${Me.Name}]
				if ${UIElement[EQ2 Bot].FindChild[EQ2Bot Tabs].FindChild[Main].Visible}
				{
						if ${UIElement[EQ2 Bot].Height} != 350
						{
						UIElement[EQ2 Bot]:SetHeight[350]
						}
				}
				elseif  ${UIElement[EQ2 Bot].FindChild[EQ2Bot Tabs].FindChild[EQ2Bot Options].Visible}
				{
					if ${UIElement[EQ2 Bot].Height} != 350
					{
						UIElement[EQ2 Bot]:SetHeight[350]
					}
				}
			}
		</OnRender>
		<Children>
			<Tabcontrol Name='EQ2Bot Tabs' Template='EQ2.Tabcontrol'>
				<X>1%</X>
				<Y>1%</Y>
				<Height>98%</Height>
				<Width>98%</Width>
				<Tabs>
					<Tab Name='Main'>
						<checkbox Name='MainTank' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>10</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Main Tank:</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[MainTank]}
								{
									UIElement[MainTank@Main@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[MainTank@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									UIElement[EQ2 Bot].FindUsableChild[MainTank Frame,frame]:Hide
									Script[EQ2Bot].Variable[MainTank]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Tank?,TRUE]:Save
									Script[EQ2Bot].Variable[MainTankPC]:Set[${Me.Name}]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Who is the Main Tank?,${Me.Name}]:Save										
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[MainTank Frame,frame]:Show
									Script[EQ2Bot].Variable[MainTank]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Tank?,FALSE]:Save
									Script[EQ2Bot].Variable[MainTankPC]:Set[${UIElement[EQ2 Bot].FindUsableChild[MainTank,combobox].SelectedItem.Text}]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Who is the Main Tank?,${UIElement[EQ2 Bot].FindUsableChild[MainTank,combobox].SelectedItem.Text}]:Save									
								}
							</OnLeftClick>
						</checkbox>
						<Frame Name='MainTank Frame'>
							<X>26%</X>
							<Y>10</Y>
							<Height>20</Height>
							<Width>95%</Width>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[MainTank]}
								{
									UIElement[EQ2 Bot].FindUsableChild[MainTank Frame,frame]:Hide
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[MainTank Frame,frame]:Show
								}
							</OnLoad>
							<Children>
								<combobox name='MainTank' Template='EQ2.Combobox'>
									<x>1</x>
									<y>1</y>
									<Width>20%</width>
									<Height>20</height>
									<Items></items>
									<Sort>Text</Sort>
									<OnLoad>
									    if ${Actor[exactname,${Script[EQ2Bot].Variable[MainTankPC]}](exists)}
									    {
    										This:AddItem[${Script[EQ2Bot].Variable[MainTankPC]}]
    										This.ItemByValue[${Script[EQ2Bot].Variable[MainTankPC]}]:Select
    									}
									</OnLoad>
									<OnSelect>
									    if ${UIElement[MainTank@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
									    {
    									    SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Tank?,TRUE]:Save
									        Script[EQ2Bot].Variable[MainTank]:Set[TRUE]
									    }
									    else
									    {
									        SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Tank?,FALSE]:Save
									        Script[EQ2Bot].Variable[MainTank]:Set[FALSE]
									    }
										Script[EQ2Bot].Variable[MainTankPC]:Set[${This.SelectedItem.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Who is the Main Tank?,${This.SelectedItem.Text}]:Save
									</OnSelect>
									<OnLeftClick>
										declare tmpvar int
										This:ClearItems
										tmpvar:Set[1]
										if ${Me.InRaid}
										{
											do
											{
    											if ${Me.Raid[${tmpvar}](exists)}
    											{
    												if !${Me.Raid[${tmpvar}].Name.Equal[${Me.Name}]}
    												{
    													This:AddItem[${Me.Raid[${tmpvar}].Name}]
    												}
    											}
											}
											while ${tmpvar:Inc}&lt;=24
										}
										elseif ${Me.Group} > 1
										{
											do
											{
												if ${Me.Group[${tmpvar}](exists)} &amp;&amp; !${Me.Group[${tmpvar}].Name.Equal[${Me.Name}]}
												{
													This:AddItem[${Me.Group[${tmpvar}].Name}]
												}
												if ${Me.Group[${tmpvar}].PetID(exists)}
												{
												    if ${Actor[${Me.Group[${tmpvar}].PetID}](exists)}
												    {
    													This:AddItem[${Me.Group[${tmpvar}].ToActor.Pet.Name}]
    												}
												}
											}
											while ${tmpvar:Inc}&lt; ${Me.Group}
										}

										if ${Me.Pet(exists)}
										{
											This:AddItem[${Me.Pet.Name}]
										}
										This:Sort
									</OnLeftClick>
									<AutoTooltip>Check the box to set yourself as MT</AutoTooltip>
								</combobox>
							</Children>
						</Frame>
						<checkbox Name='MainAssist' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>30</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Main Assist:</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[MainAssistMe]}
								{
									UIElement[MainAssist@Main@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[MainAssist@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									UIElement[EQ2 Bot].FindUsableChild[MainAssist Frame,frame]:Hide
									Script[EQ2Bot].Variable[MainAssistMe]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Assist?,TRUE]:Save
									Script[EQ2Bot].Variable[MainAssist]:Set[${Me.Name}]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Who is the Main Assist?,${Me.Name}]:Save											
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[MainAssist Frame,frame]:Show
									Script[EQ2Bot].Variable[MainAssistMe]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Assist?,FALSE]:Save
									Script[EQ2Bot].Variable[MainAssist]:Set[${UIElement[EQ2 Bot].FindUsableChild[MainAssist,combobox].SelectedItem.Text}]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Who is the Main Assist?,${UIElement[EQ2 Bot].FindUsableChild[MainAssist,combobox].SelectedItem.Text}]:Save											
								}
							</OnLeftClick>
							<AutoTooltip>Check the box to set yourself as MA</AutoTooltip>
						</checkbox>
						<Frame Name='MainAssist Frame'>
							<X>26%</X>
							<Y>30</Y>
							<Height>20</Height>
							<Width>95%</Width>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[MainAssistMe]}
								{
									UIElement[EQ2 Bot].FindUsableChild[MainAssist Frame,frame]:Hide
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[MainAssist Frame,frame]:Show
								}
							</OnLoad>
							<Children>
								<combobox name='MainAssist' Template='EQ2.Combobox'>
									<x>1</x>
									<y>1</y>
									<Width>20%</width>
									<Height>20</height>
									<Items></items>
									<Sort>Text</Sort>
									<OnLoad>
									    if ${Actor[exactname,${Script[EQ2Bot].Variable[MainAssist]}](exists)}
									    {
    										This:AddItem[${Script[EQ2Bot].Variable[MainAssist]}]
    										This.ItemByValue[${Script[EQ2Bot].Variable[MainAssist]}]:Select
    									}
									</OnLoad>
									<OnSelect>
									    if ${UIElement[MainAssist@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
									    {
    									    SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Assist?,TRUE]:Save
									        Script[EQ2Bot].Variable[MainAssistMe]:Set[TRUE]
									    }
									    else
									    {
    									    SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[I am the Main Assist?,FALSE]:Save
									        Script[EQ2Bot].Variable[MainAssistMe]:Set[FALSE]
									    }									
										Script[EQ2Bot].Variable[MainAssist]:Set[${This.SelectedItem.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Who is the Main Assist?,${This.SelectedItem.Text}]:Save</OnSelect>
									<OnLeftClick>
										declare tmpvar int
										This:ClearItems
										tmpvar:Set[1]
										if ${Me.InRaid}
										{
											do
											{
												if ${Me.Raid[${tmpvar}](exists)}
												{
													This:AddItem[${Me.Raid[${tmpvar}].Name}]
												}
											}
											while ${tmpvar:Inc}&lt;=24
										}
										elseif ${Me.Group} > 1
										{
											do
											{
												if ${Me.Group[${tmpvar}](exists)}
												{
													This:AddItem[${Me.Group[${tmpvar}].Name}]
												}
												if ${Me.Group[${tmpvar}].PetID(exists)}
												{
												    if ${Actor[${Me.Group[${tmpvar}].PetID}](exists)}
												    {
    													This:AddItem[${Me.Group[${tmpvar}].ToActor.Pet.Name}]
    											    }
												}
											}
											while ${tmpvar:Inc}&lt; ${Me.Group}
										}

										if ${Me.Pet(exists)}
										{
											This:AddItem[${Me.Pet.Name}]
										}
										This:Sort
									</OnLeftClick>
								</combobox>
								<Text Name='MainAssist Text' Template='EQ2.text'>
									<X>23%</X>
									<Y>1</Y>
									<Width>20%</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>and ASSIST at:</Text>
								</Text>
								<Textentry Name='AssistHP' Template='EQ2.textentry'>
									<X>42%</X>
									<Y>1</Y>
									<Width>5%</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>3</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[AssistHP]}]</OnLoad>
									<OnChange>
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Assist and Engage in combat at what Health?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Assist and Engage in combat at what Health?]}]
										Script[EQ2Bot].Variable[AssistHP]:Set[${This.Text}]
									</OnChange>
								</Textentry>
								<Text Name='Health Text' Template='EQ2.text'>
									<X>48%</X>
									<Y>1</Y>
									<Width>20%</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>%  Health</Text>
								</Text>
							</Children>
						</Frame>
						<Frame Name='Following Frame'>
							<X>1</X>
							<Y>40</Y>
							<Height>40</Height>
							<Width>95%</Width>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[PathType]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Following Frame,frame]:Hide
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Following Frame,frame]:Show
								}
							</OnLoad>
							<Children>
                            	<Commandcheckbox Name='AutoFollow' Template='EQ2.Commandcheckbox'>
                            		<X>5%</X>
                            		<Y>13</Y>
                            		<Width>40</Width>
                            		<Height>20</Height>
                            		<Text>Auto Follow:</Text>
                            		<AutoTooltip>Select to use EQ2 AutoFollow on the Main Assist instead of EQ2bot Follow</AutoTooltip>
                            		<OnLeftClick>
                            			if ${This.Checked}
                            			{
                            				Script[EQ2Bot].Variable[AutoFollowMode]:Set[TRUE]
                            				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Auto Follow Mode",TRUE]:Save
                            			}
                            			else
                            			{
                            				Script[EQ2Bot].Variable[AutoFollowMode]:Set[FALSE]
                            				SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set["Auto Follow Mode",FALSE]:Save
                            			}
                            		</OnLeftClick>
                            		<Data>${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[Auto Follow Mode]}</Data>
                            	</Commandcheckbox>
                            	<combobox name='AutoFollowee' Template='EQ2.Combobox'>
                            		<x>28%</x>
                            		<y>10</y>
                            		<Width>20%</width>
                            		<Height>20</height>
                            		<AutoTooltip>The Group Member to auto follow</AutoTooltip>
                            		<Items></items>
                            		<OnLoad>
                            		    if ${Actor[exactname,${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[AutoFollowee]}](exists)}
                            		    {
                                			This:AddItem[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[AutoFollowee]}]
                                			This.ItemByValue[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras].GetString[AutoFollowee]}]:Select
                                		}
                            		</OnLoad>
                            		<OnSelect>
                            			Script[EQ2Bot].Variable[AutoFollowee]:Set[${This.SelectedItem.Text}]
                            			SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[EQ2BotExtras]:Set[AutoFollowee,${This.SelectedItem.Text}]:Save</OnSelect>
                            		<OnLeftClick>
                            			declare tmpvar int
                            
                            			This:ClearItems
                            			tmpvar:Set[1]
                        				do
                        				{
                        					if ${Me.Group[${tmpvar}](exists)}
                        					{
                        						This:AddItem[${Me.Group[${tmpvar}].Name}]
                        					}
                        				}
                            			while ${tmpvar:Inc}&lt; ${Me.Group}
                            		</OnLeftClick>
                            	</combobox>							
						    </Children>
						</Frame>
						<Frame Name='Pathing Frame'>
							<X>1</X>
							<Y>90</Y>
							<Height>160</Height>
							<Width>95%</Width>
							<OnLoad>
							</OnLoad>
							<Children>
								<Text Name='Combat Pathing Text' Template='EQ2.text'>
									<X>30%</X>
									<Y>1</Y>
									<Width>95%</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>--==: Combat Pathing Selection :==--</Text>
								</Text>
								<checkbox Name='Manual' Template='EQ2.checkbox'>
									<X>5%</X>
									<Y>21</Y>
									<Width>20%</Width>
									<Height>20</Height>
									<Text>Manual Movement</Text>
									<OnLoad>
										if !${Script[EQ2Bot].Variable[PathType]}
										{
											UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										if ${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
										{
											UIElement[EQ2 Bot].FindUsableChild[Following Frame,frame]:Show
											Script[EQ2Bot].Variable[PathType]:Set[0]
											SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[What Path Type (0-4)?,0]:Save
											UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
										}
									</OnLeftClick>
								</checkbox>
								<checkbox Name='Minimum' Template='EQ2.checkbox'>
									<X>5%</X>
									<Y>41</Y>
									<Width>20%</Width>
									<Height>20</Height>
									<Text>Minimum Movement - Home Point Set</Text>
									<OnLoad>
										if ${Script[EQ2Bot].Variable[PathType]}==1
										{
											UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										if ${UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
										{
											UIElement[EQ2 Bot].FindUsableChild[Following Frame,frame]:Hide
											Script[EQ2Bot].Variable[PathType]:Set[1]
											SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[What Path Type (0-4)?,1]:Save
											UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
										}
										else
							            {
							                if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
							                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
							            }	    
									</OnLeftClick>
								</checkbox>
								<checkbox Name='Camp' Template='EQ2.checkbox'>
									<X>5%</X>
									<Y>61</Y>
									<Width>20%</Width>
									<Height>20</Height>
									<Text>Camp - Follow Small Nav Path with multiple Pull Points</Text>
									<OnLoad>
										if ${Script[EQ2Bot].Variable[PathType]}==2
										{
											UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										if ${UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
										{
											UIElement[EQ2 Bot].FindUsableChild[Following Frame,frame]:Hide
											Script[EQ2Bot].Variable[PathType]:Set[2]
											SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[What Path Type (0-4)?,2]:Save
											UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
										}
										else
							            {
							                if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
							                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
							            }										
									</OnLeftClick>
								</checkbox>
								<checkbox Name='Dungeon Crawl' Template='EQ2.checkbox'>
									<X>5%</X>
									<Y>81</Y>
									<Width>20%</Width>
									<Height>20</Height>
									<Text>Dungeon Crawl - Follow Nav Path: Start to Finish (DC)</Text>
									<OnLoad>
										if ${Script[EQ2Bot].Variable[PathType]}==3
										{
											UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										if ${UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
										{
											UIElement[EQ2 Bot].FindUsableChild[Following Frame,frame]:Hide
											Script[EQ2Bot].Variable[PathType]:Set[3]
											SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[What Path Type (0-4)?,3]:Save
											UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
										}
										else
							            {
							                if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
							                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
							            }										
									</OnLeftClick>
								</checkbox>
								<checkbox Name='Auto Hunting' Template='EQ2.checkbox'>
									<X>5%</X>
									<Y>101</Y>
									<Width>20%</Width>
									<Height>20</Height>
									<Text>Auto Hunting - Pull nearby Mobs within a Maximum Scan Range (AH)</Text>
									<OnLoad>
										if ${Script[EQ2Bot].Variable[PathType]}==4
										{
											UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										if ${UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
										{
											UIElement[EQ2 Bot].FindUsableChild[Following Frame,frame]:Hide
											Script[EQ2Bot].Variable[PathType]:Set[4]
											SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[What Path Type (0-4)?,4]:Save
											UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
											UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
										}
										else
							            {
							                if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
							                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
							            }										
									</OnLeftClick>
								</checkbox>
								<Text Name='ScanRange Text' Template='EQ2.text'>
									<X>20%</X>
									<Y>121</Y>
									<Width>95%</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Maximum Scan Range for Camp, DC or AH: </Text>
								</Text>
								<Textentry Name='ScanRange' Template='EQ2.textentry'>
									<X>76%</X>
									<Y>121</Y>
									<Width>7%</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>4</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[ScanRange]}]</OnLoad>
									<OnChange>
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[What RANGE to SCAN for Mobs?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[What RANGE to SCAN for Mobs?]}]
										Script[EQ2Bot].Variable[ScanRange]:Set[${This.Text}]
									</OnChange>
								</Textentry>
								<Text Name='MARange Text' Template='EQ2.text'>
									<X>21%</X>
									<Y>145</Y>
									<Width>95%</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Maximum Engage Range from Main Assist: </Text>
								</Text>
								<Textentry Name='MARange' Template='EQ2.textentry'>
									<X>75%</X>
									<Y>145</Y>
									<Width>7%</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>4</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[MARange]}]</OnLoad>
									<OnChange>
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[What RANGE to Engage from Main Assist?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[What RANGE to Engage from Main Assist?]}]
										Script[EQ2Bot].Variable[MARange]:Set[${This.Text}]
									</OnChange>
								</Textentry>
							</Children>
						</Frame>
						<Frame Name='Combat Frame'>
							<X>1</X>
							<Y>25%</Y>
							<Height>150</Height>
							<Width>95%</Width>
							<Visible>0</Visible>
							<OnLoad>
							</OnLoad>
							<Children>
								<Text Name='status 3' Template='EQ2.text'>
									<X>5%</X>
									<Y>25</Y>
									<Width>90%</Width>
									<Height>10</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>Current Action:   ${Script[EQ2Bot].Variable[CurrentAction]}</Text>
								</Text>
								<Text Name='Current Target' Template='EQ2.text'>
									<X>5%</X>
									<Y>40</Y>
									<Width>90%</Width>
									<Height>25</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>Current Target:   ${If[${Script[EQ2Bot].Variable[MainTank]},${If[${Target(exists)},${Target.Name},No Target]},${If[${Actor[${Script[EQ2Bot].Variable[KillTarget]}](exists)},${Actor[${Script[EQ2Bot].Variable[KillTarget]}].Name},No Target]}]}</Text>
								</Text>
								<!--
								<Text Name='Target Aggro' Template='EQ2.text'>
									<X>5%</X>
									<Y>55</Y>
									<Width>40%</Width>
									<Height>25</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>Aggro Status: ${Actor[${Target.ID}].IsAggro}</Text>
								</Text>
								<Text Name='Target Combat' Template='EQ2.text'>
									<X>50%</X>
									<Y>55</Y>
									<Width>40%</Width>
									<Height>25</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>InCombat: ${Actor[${Target.ID}].InCombatMode}</Text>
								</Text> -->
								<Text Name='Gained XP' Template='EQ2.text'>
									<X>5%</X>
									<Y>90</Y>
									<Width>90%</Width>
									<Height>10</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>
									${Script[eq2bot].Variable[GainedXPString]}
    								</Text>
								</Text>
								<Text Name='Runtime' Template='EQ2.text'>
									<X>55%</X>
									<Y>90</Y>
									<Width>90%</Width>
									<Height>10</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>Runtime: ${Math.Calc[(${Time.Timestamp}-${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[Temporary Settings].GetInt[StartTime]})/60].Precision[2]} min.</Text>
								</Text>
							</Children>
						</Frame>
						<Commandbutton name='Start EQ2Bot' Template='EQ2.Commandbutton'>
							<X>40%</X>
							<Y>88%</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Text>Start EQ2Bot</Text>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call StartBot]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Stop EQ2Bot' Template='EQ2.Commandbutton'>
							<X>15%</X>
							<Y>80%</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Stop EQ2Bot</Text>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call StopBot]
							</OnLeftClick>
						</Commandbutton>	
						<Commandbutton name='Check Buffs' Template='EQ2.Commandbutton'>
							<X>40%</X>
							<Y>80%</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Check Buffs</Text>
							<AutoTooltip>'Check Buffs' routine ONCE (Combat)</AutoTooltip>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call CheckBuffsOnce]
							</OnLeftClick>
						</Commandbutton>						
						<Commandbutton name='Pause EQ2Bot' Template='EQ2.Commandbutton'>
							<X>65%</X>
							<Y>80%</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Pause EQ2Bot</Text>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call PauseBot]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Resume EQ2Bot' Template='EQ2.Commandbutton'>
							<X>65%</X>
							<Y>80%</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Resume EQ2Bot</Text>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call ResumeBot]
							</OnLeftClick>
						</Commandbutton>
						

						
						
					</Tab>
					<Tab Name='EQ2Bot Options'>
						<checkbox Name='AutoSwitch' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>10</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Assist and Switch Targets at 30% HP</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[AutoSwitch]}
								{
									UIElement[AutoSwitch@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[AutoSwitch@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[AutoSwitch]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Switch Targets when Main Assist Switches?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[AutoSwitch]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Switch Targets when Main Assist Switches?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='AutoMelee' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>10</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Engage in Melee Combat</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[AutoMelee]}
								{
									UIElement[AutoMelee@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[AutoMelee@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[AutoMelee]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Melee,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[AutoMelee]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Melee,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreEpic' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>30</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Epic Encounters</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreEpic]}
								{
									UIElement[IgnoreEpic@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreEpic@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreEpic]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Epic Encounters?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreEpic]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Epic Encounters?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreNamed' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>30</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Named</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreNamed]}
								{
									UIElement[IgnoreNamed@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreNamed@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreNamed]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Named Encounters?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreNamed]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Named Encounters?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreHeroic' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>50</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Heroic Encounters</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreHeroic]}
								{
									UIElement[IgnoreHeroic@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreHeroic@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreHeroic]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Heroic Encounters?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreHeroic]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Heroic Encounters?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreGreyCon' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>50</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Grey Con Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreGreyCon]}
								{
									UIElement[IgnoreGreyCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreGreyCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreGreyCon]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Grey Con Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreGreyCon]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Grey Con Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreRedCon' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>70</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Red Con Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreRedCon]}
								{
									UIElement[IgnoreRedCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreRedCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreRedCon]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Red Con Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreRedCon]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Red Con Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreGreenCon' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>70</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Green Con Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreGreenCon]}
								{
									UIElement[IgnoreGreenCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreGreenCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreGreenCon]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Green Con Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreGreenCon]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Green Con Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreOrangeCon' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>90</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Orange Con Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreOrangeCon]}
								{
									UIElement[IgnoreOrangeCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreOrangeCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreRedCon]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Orange Con Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreOrangeCon]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Orange Con Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreBlueCon' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>90</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Blue Con Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreBlueCon]}
								{
									UIElement[IgnoreBlueCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreBlueCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreBlueCon]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Blue Con Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreBlueCon]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Blue Con Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreYellowCon' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>110</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore Yellow Con Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreYellowCon]}
								{
									UIElement[IgnoreYellowCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreYellowCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreRedCon]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Yellow Con Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreYellowCon]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore Yellow Con Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='IgnoreWhiteCon' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>110</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Ignore White Con Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[IgnoreWhiteCon]}
								{
									UIElement[IgnoreWhiteCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[IgnoreWhiteCon@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[IgnoreWhiteCon]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore White Con Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[IgnoreWhiteCon]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Ignore White Con Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='PullNonAggro' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>130</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Pull Non Aggro Mobs</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[PullNonAggro]}
								{
									UIElement[PullNonAggro@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[PullNonAggro@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[PullNonAggro]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Pull Non Aggro Mobs?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[PullNonAggro]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Pull Non Aggro Mobs?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='AutoLoot' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>130</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Loot Corpses and Chests</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[AutoLoot]}
								{
									UIElement[AutoLoot@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[AutoLoot@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[AutoLoot]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Loot Corpses and open Treasure Chests?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[AutoLoot]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Loot Corpses and open Treasure Chests?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='Priest Power' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>150</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Check if Priest has Power</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[CheckPriestPower]}
								{
									UIElement[Priest Power@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Priest Power@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[CheckPriestPower]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Check if Priest has Power in the Group?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[CheckPriestPower]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Check if Priest has Power in the Group?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<Text name='lblLootMethod' Template='EQ2.text'>
						  <x>61%</x>
						  <y>150</y>
						  <Height>20</Height>
							<Width>80</Width>
							<Alignment>Left</Alignment>
							<Text>Loot Method:</Text>
						</Text>
						<combobox Name='LootMethod' Template='EQ2.Combobox'>
							<X>80%</X>
							<Y>150</Y>
							<Width>70</Width>
							<Height>20</Height>
							<AutoTooltip>Select the Loot Method</AutoTooltip>
							<Items>
								<Item Value='1'>Accept</Item>
								<Item Value='2'>Decline</Item>
								<Item Value='3'>Idle</Item>
							</items>
							<OnLoad>
								This.ItemByText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[LootMethod]}]:Select
							</OnLoad>
							<OnSelect>
								Script[EQ2Bot].Variable[LootMethod]:Set[${This.SelectedItem.Text}]
								SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[LootMethod,${This.SelectedItem.Text}]:Save</OnSelect>
							<OnLeftClick></OnLeftClick>
						</combobox>
						<checkbox Name='Lore Confirmation' Template='EQ2.checkbox'>
							<X>57%</X>
							<Y>170</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Roll on LORE Items</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[LoreConfirm]}
								{
									UIElement[Lore Confirmation@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Lore Confirmation@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[LoreConfirm]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Loot Lore Items?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[LoreConfirm]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Loot Lore Items?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='NoTrade Confirmation' Template='EQ2.checkbox'>
							<X>57%</X>
							<Y>190</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Roll on NOTRADE Items</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[NoTradeConfirm]}
								{
									UIElement[NoTrade Confirmation@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[NoTrade Confirmation@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[NoTradeConfirm]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Loot NoTrade Items?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[NoTradeConfirm]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to Loot NoTrade Items?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='Loot Previously Collected Shineys' Template='EQ2.checkbox'>
							<X>57%</X>
							<Y>210</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Roll on prev. collected Shineys</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[LootPrevCollectedShineys]}
								{
									UIElement[Loot Previously Collected Shineys@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Loot Previously Collected Shineys@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[LootPrevCollectedShineys]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to loot previously collected shineys?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[LootPrevCollectedShineys]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Do you want to loot previously collected shineys?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>						
						<checkbox Name='AutoPull' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>170</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Automatically Pull</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[AutoPull]}
								{
									UIElement[AutoPull@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Show
									if ${Script[EQ2Bot].Variable[PullType].Equal[Bow Pull]}
									{
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Show
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
									}
									elseif ${Script[EQ2Bot].Variable[PullType].Equal[Pet Pull]}
									{
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Show
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
									}
									elseif ${Script[EQ2Bot].Variable[PullType].Equal[Spell or CA Pull]}
									{
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Show
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									}
									else
									{
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide		
									}									
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide		
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[AutoPull@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Show
									Script[EQ2Bot].Variable[AutoPull]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Pull,TRUE]:Save
									if ${Script[EQ2Bot].Variable[PullType].Equal[Bow Pull]}
									{
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Show
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
									}
									elseif ${Script[EQ2Bot].Variable[PullType].Equal[Pet Pull]}
									{
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Show
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
									}
									elseif ${Script[EQ2Bot].Variable[PullType].Equal[Spell or CA Pull]}
									{
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Show
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									}
									else
									{
										UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
										UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide		
									}
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
									Script[EQ2Bot].Variable[AutoPull]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Auto Pull,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<Frame Name='Pull Frame'>
							<X>5%</X>
							<Y>220</Y>
							<Visible>0</Visible>
							<Height>20</Height>
							<Width>95%</Width>
							<OnLoad>
								if ${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[Auto Pull]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Show
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
								}
							</OnLoad>
							<Children>
								<Text Name='lblPullType' Template='EQ2.text'>
									<x>1</x>
									<y>3</y>
									<Width>60</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull Type:</Text>
								</Text>
								<combobox name='PullType' Template='EQ2.Combobox'>
									<x>60</x>
									<y>1</y>
									<Width>80</width>
									<Height>20</height>
									<AutoTooltip>Select the Pull Type</AutoTooltip>
									<Items>
									    <Item Value='None'>Choose...</Item>
										<Item Value='PullWithBow'>Bow Pull</Item>
										<Item Value='PullWithPet'>Pet Pull</Item>
										<Item Value='PullWithSpell'>Spell or CA Pull</Item>
									</items>
									<OnLoad>
										This.ItemByText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[PullType]}]:Select
										if ${This.SelectedItem.Text.Equal[Bow Pull]}
										{
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Show
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
										}
										elseif ${This.SelectedItem.Text.Equal[Pet Pull]}
										{
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Show
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
										}
										elseif ${This.SelectedItem.Text.Equal[Spell or CA Pull]}
										{
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Show
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
										}
										else
										{
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide		
										}
										Script[EQ2Bot].Variable[PullType]:Set[${This.SelectedItem.Text}]										
									</OnLoad>
									<OnSelect>
										if ${This.SelectedItem.Text.Equal[Bow Pull]}
										{
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Show
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
										}
										elseif ${This.SelectedItem.Text.Equal[Pet Pull]}
										{
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Show
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
										}
										elseif ${This.SelectedItem.Text.Equal[Spell or CA Pull]}
										{
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Show
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
										}
										else
										{
											UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
											UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide		
										}
										Script[EQ2Bot].Variable[PullType]:Set[${This.SelectedItem.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[PullType,${This.SelectedItem.Text}]:Save</OnSelect>
									<OnLeftClick></OnLeftClick>
								</combobox>
							</Children>
						</frame>
						<frame name='Bow Pull Frame'>
							<x>5%</x>
							<y>240</y>
							<Visible>0</Visible>
							<Height>40</Height>
							<Width>95%</Width>
							<OnLoad>
								if ${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[Auto Pull]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Show
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
								}
								if ${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[PullType].Equal[Bow Pull]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Show
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
								}
							</OnLoad>
							<Children>
 								<Text Name='PullRange Text' Template='EQ2.text'>
									<X>57%</X>
									<Y>1</Y>
									<Width>70</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull Range:</Text>
								</Text>
								<Textentry Name='PullRange' Template='EQ2.textentry'>
									<X>71%</X>
									<Y>1</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>4</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullRange]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[PullRange]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set["What RANGE to PULL from?",${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[What RANGE to PULL from?]}]
									</OnChange>
								</Textentry>
								<Text Name='PowerCheck Text' Template='EQ2.text'>
									<X>6%</X>
									<Y>20</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull when power is at least</Text>
								</Text>
								<Textentry Name='PowerCheck' Template='EQ2.textentry'>
									<X>42%</X>
									<Y>20</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>5</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[PowerCheck]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[PowerCheck]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Minimum Power the puller will pull at?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Minimum Power the puller will pull at?]}]
									</OnChange>
								</Textentry>
								<Text Name='HealthCheck Text1' Template='EQ2.text'>
									<X>49%</X>
									<Y>20</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>% and Health is at least</Text>
								</Text>
								<Textentry Name='HealthCheck' Template='EQ2.textentry'>
									<X>80%</X>
									<Y>20</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>5</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[HealthCheck]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[HealthCheck]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Minimum Health the puller will pull at?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Minimum Health the puller will pull at?]}]
									</OnChange>
								</Textentry>
								<Text Name='HealthCheck Text2' Template='EQ2.text'>
									<X>88%</X>
									<Y>20</Y>
									<Width>70</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>%</Text>
								</Text>
							</Children>
						</frame>
						<frame name='Pet Pull Frame'>
							<x>5%</x>
							<y>240</y>
							<Visible>0</Visible>
							<Height>40</Height>
							<Width>95%</Width>
							<OnLoad>
								if ${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[Auto Pull]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Show
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
								}							
								if ${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[PullType].Equal[Pet Pull]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Show
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
								}
							</OnLoad>
							<Children>
 								<Text Name='PullRange Text' Template='EQ2.text'>
									<X>57%</X>
									<Y>1</Y>
									<Width>70</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull Range:</Text>
								</Text>
								<Textentry Name='PullRange' Template='EQ2.textentry'>
									<X>71%</X>
									<Y>1</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>4</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullRange]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[PullRange]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set["What RANGE to PULL from?",${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[What RANGE to PULL from?]}]
									</OnChange>
								</Textentry>
								<Text Name='PowerCheck Text' Template='EQ2.text'>
									<X>6%</X>
									<Y>20</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull when power is at least</Text>
								</Text>
								<Textentry Name='PowerCheck' Template='EQ2.textentry'>
									<X>42%</X>
									<Y>20</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>5</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[PowerCheck]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[PowerCheck]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Minimum Power the puller will pull at?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Minimum Power the puller will pull at?]}]
									</OnChange>
								</Textentry>
								<Text Name='HealthCheck Text1' Template='EQ2.text'>
									<X>49%</X>
									<Y>20</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>% and Health is at least</Text>
								</Text>
								<Textentry Name='HealthCheck' Template='EQ2.textentry'>
									<X>80%</X>
									<Y>20</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>5</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[HealthCheck]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[HealthCheck]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Minimum Health the puller will pull at?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Minimum Health the puller will pull at?]}]
									</OnChange>
								</Textentry>
								<Text Name='HealthCheck Text2' Template='EQ2.text'>
									<X>88%</X>
									<Y>20</Y>
									<Width>70</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>%</Text>
								</Text>
							</Children>
						</frame>
						<frame name='Spell Pull Frame'>
							<x>5%</x>
							<y>240</y>
							<Visible>0</Visible>
							<Height>40</Height>
							<Width>95%</Width>
							<OnLoad>
								if ${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[Auto Pull]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Show
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,frame]:Hide
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
								}							
								if ${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[PullType].Equal[Spell or CA Pull]}
								{
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Show
								}
								else
								{
									UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,frame]:Hide
								}
							</OnLoad>
							<Children>
								<Text Name='PullSpell Text' Template='EQ2.text'>
									<X>8%</X>
									<Y>1</Y>
									<Width>70</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull Spell:</Text>
								</Text>
								<Textentry Name='PullSpell' Template='EQ2.textentry'>
									<X>20%</X>
									<Y>1</Y>
									<Width>120</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>30</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullSpell]}]</OnLoad>
								</Textentry>
								<Commandbutton name='UpdatePullSpell' Template='EQ2.Commandbutton'>
									<X>47%</X>
									<Y>1</Y>
									<Width>35</Width>
									<Height>15</Height>
									<Text>Set</Text>
									<OnLeftClick>
										if ${Me.Ability[${UIElement[PullSpell@Spell Pull Frame@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Text}](exists)}
										{
											Script[EQ2Bot].Variable[PullSpell]:Set[${UIElement[PullSpell@Spell Pull Frame@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Text}]
											SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set["What to use when PULLING?",${UIElement[PullSpell@Spell Pull Frame@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Text}]:Save
											UIElement[PullSpell@Spell Pull Frame@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[What to use when PULLING?]}]
										}
										else
										{
											UIElement[PullSpell@Spell Pull Frame@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetString[What to use when PULLING?]}]
										}
									</OnLeftClick>
								</Commandbutton>
 								<Text Name='PullRange Text' Template='EQ2.text'>
									<X>57%</X>
									<Y>1</Y>
									<Width>70</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull Range:</Text>
								</Text>
								<Textentry Name='PullRange' Template='EQ2.textentry'>
									<X>71%</X>
									<Y>1</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>4</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullRange]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[PullRange]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set["What RANGE to PULL from?",${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[What RANGE to PULL from?]}]
									</OnChange>
								</Textentry>
								<Text Name='PowerCheck Text' Template='EQ2.text'>
									<X>6%</X>
									<Y>20</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pull when power is at least</Text>
								</Text>
								<Textentry Name='PowerCheck' Template='EQ2.textentry'>
									<X>42%</X>
									<Y>20</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>5</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[PowerCheck]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[PowerCheck]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Minimum Power the puller will pull at?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Minimum Power the puller will pull at?]}]
									</OnChange>
								</Textentry>
								<Text Name='HealthCheck Text1' Template='EQ2.text'>
									<X>49%</X>
									<Y>20</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>% and Health is at least</Text>
								</Text>
								<Textentry Name='HealthCheck' Template='EQ2.textentry'>
									<X>80%</X>
									<Y>20</Y>
									<Width>30</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<MaxLength>5</MaxLength>
									<OnLoad>This:SetText[${Script[EQ2Bot].Variable[HealthCheck]}]</OnLoad>
									<OnChange>
										Script[EQ2Bot].Variable[HealthCheck]:Set[${This.Text}]
										SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Minimum Health the puller will pull at?,${This.Text}]:Save
										This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Minimum Health the puller will pull at?]}]
									</OnChange>
								</Textentry>
								<Text Name='HealthCheck Text2' Template='EQ2.text'>
									<X>88%</X>
									<Y>20</Y>
									<Width>70</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>%</Text>
								</Text>
							</Children>
						</frame>
						<checkbox Name='Close UI' Template='EQ2.checkbox'>
							<X>5%</X>
							<Y>95%</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Close the UI after starting EQ2Bot</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[CloseUI]}
								{
									UIElement[Close UI@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[Close UI@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[CloseUI]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Close the UI after starting EQ2Bot?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[CloseUI]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Close the UI after starting EQ2Bot?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name='WipeRevive' Template='EQ2.checkbox'>
							<X>55%</X>
							<Y>95%</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Revive on Group Wipe</Text>
							<OnLoad>
								if ${Script[EQ2Bot].Variable[WipeRevive]}
								{
									UIElement[WipeRevive@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${UIElement[WipeRevive@EQ2Bot Options@EQ2Bot Tabs@EQ2 Bot].Checked}
								{
									Script[EQ2Bot].Variable[WipeRevive]:Set[TRUE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Revive on Group Wipe?,TRUE]:Save
								}
								else
								{
									Script[EQ2Bot].Variable[WipeRevive]:Set[FALSE]
									SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Revive on Group Wipe?,FALSE]:Save
								}
							</OnLeftClick>
						</checkbox>
					</Tab>
					<Tab name='Navigation'>
						<Text Name='Zone Name' Template='EQ2.text'>
							<X>0</X>
							<Y>10</Y>
							<Width>100%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>Current Zone: ${Zone.Name}</text>
						</Text>
						<checkbox Name='Camp' Template='EQ2.checkbox'>
							<X>20%</X>
							<Y>40</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Camp Pathing</Text>
							<OnLoad>
								UIElement[Camp@Navigation@EQ2Bot Tabs@EQ2 Bot]:SetChecked
							</OnLoad>
							<OnLeftClick>
								UIElement[Camp@Navigation@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								UIElement[Dungeon Crawl@Navigation@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
								Script[EQ2Bot].Variable[CampNav]:Set[TRUE]
								UIElement[Start Nav@Navigation@EQ2Bot Tabs@EQ2 Bot]:Show
								UIElement[Move Start@Navigation@EQ2Bot Tabs@EQ2 Bot]:Hide
							</OnLeftClick>
						</checkbox>
						<checkbox Name='Dungeon Crawl' Template='EQ2.checkbox'>
							<X>50%</X>
							<Y>40</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Dungeon Crawl Pathing</Text>
							<OnLoad>
								UIElement[Dungeon Crawl@Navigation@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
							</OnLoad>
							<OnLeftClick>
								UIElement[Dungeon Crawl@Navigation@EQ2Bot Tabs@EQ2 Bot]:SetChecked
								UIElement[Camp@Navigation@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
								Script[EQ2Bot].Variable[CampNav]:Set[FALSE]
								Script[EQ2Bot]:ExecuteAtom[CheckFinish]
							</OnLeftClick>
						</checkbox>
						<Text Name='Path Type' Template='EQ2.text'>
							<X>0</X>
							<Y>40</Y>
							<Width>100%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text></text>
						</Text>
						<Text Name='Camp Count' Template='EQ2.text'>
							<X>10%</X>
							<Y>70</Y>
							<Width>90%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Camp Locations Found: ${Script[EQ2Bot].VariableScope.CampCount}</text>
						</Text>
						<Text Name='Pull Count' Template='EQ2.text'>
							<X>60%</X>
							<Y>70</Y>
							<Width>90%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Pull Locations Found: ${Script[EQ2Bot].VariableScope.PullCount}</text>
						</Text>
						<Text Name='Finish Text 1' Template='EQ2.text'>
							<X>0</X>
							<Y>70</Y>
							<Width>100%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Alignment>Center</Alignment>
							<Text>Finish Region has not been created!</text>
						</Text>
						<Commandbutton name='Move Camp' Template='EQ2.Commandbutton'>
							<X>20%</X>
							<Y>110</Y>
							<Width>24%</Width>
							<Height>20</Height>
							<Text>Move to Camp</Text>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call MoveToGroup Camp]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Move Start' Template='EQ2.Commandbutton'>
							<X>20%</X>
							<Y>110</Y>
							<Width>24%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Move to Start</Text>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call MoveToGroup Start]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Clear Path' Template='EQ2.Commandbutton'>
							<X>55%</X>
							<Y>110</Y>
							<Width>24%</Width>
							<Height>20</Height>
							<Text>Clear Navigation</Text>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[ClearPath]
							</OnLeftClick>
						</Commandbutton>
						<Text Name='Start Text' Template='EQ2.text'>
							<X>0</X>
							<Y>150</Y>
							<Width>100%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text></text>
						</Text>
						<Text Name='Warning Text' Template='EQ2.text'>
							<X>0</X>
							<Y>220</Y>
							<Visible>0</Visible>
							<Width>100%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>Warning: Clicking Start Pather will create a new Camp Location</text>
						</Text>
						<Commandbutton name='Add Pull Region' Template='EQ2.Commandbutton'>
							<X>35%</X>
							<Y>120</Y>
							<Width>25%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Add Pull Region</Text>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call AddPullRegion]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Finish' Template='EQ2.Commandbutton'>
							<X>47%</X>
							<Y>100</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Create Finish</Text>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[CreateFinish]
							</OnLeftClick>
						</Commandbutton>
						<Text Name='Finish Text 2' Template='EQ2.text'>
							<X>0</X>
							<Y>70</Y>
							<Visible>0</Visible>
							<Width>100%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>Finish Region has been created!!</text>
						</Text>
						<Commandbutton name='Include' Template='EQ2.Commandbutton'>
							<X>78%</X>
							<Y>150</Y>
							<Width>12%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Include</Text>
							<AutoTooltip>Include the selected POI</AutoTooltip>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[IncludePOI]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Exclude' Template='EQ2.Commandbutton'>
							<X>78%</X>
							<Y>180</Y>
							<Width>12%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Exclude</Text>
							<AutoTooltip>Exclude the selected POI</AutoTooltip>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[ExcludePOI]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Save Path Camp' Template='EQ2.Commandbutton'>
							<X>18%</X>
							<Y>180</Y>
							<Width>22%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Save Navigation</Text>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[SavePath]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='End Path Camp' Template='EQ2.Commandbutton'>
							<X>55%</X>
							<Y>180</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>End Pather</Text>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[EndPath]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Start Nav' Template='EQ2.Commandbutton'>
							<X>38%</X>
							<Y>180</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Text>Start Pather</Text>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[StartPather]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Save Path DC' Template='EQ2.Commandbutton'>
							<X>15%</X>
							<Y>240</Y>
							<Width>22%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Save Navigation</Text>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[SavePath]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='End Path DC' Template='EQ2.Commandbutton'>
							<X>50%</X>
							<Y>240</Y>
							<Width>20%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>End Pather</Text>
							<OnLeftClick>
								Script[EQ2Bot]:ExecuteAtom[EndPath]
							</OnLeftClick>
						</Commandbutton>
						<Commandbutton name='Add POI' Template='EQ2.Commandbutton'>
							<X>18%</X>
							<Y>100</Y>
							<Width>15%</Width>
							<Height>20</Height>
							<Visible>0</Visible>
							<Text>Add POI</Text>
							<AutoTooltip>Add a Point of Interest</AutoTooltip>
							<OnLeftClick>
								Script[EQ2Bot]:QueueCommand[call AddPOI]
							</OnLeftClick>
						</Commandbutton>
						<Listbox Name='POI List' Template='EQ2.Listbox'>
							<X>10%</X>
							<Y>125</Y>
							<Width>65%</Width>
							<Height>35%</Height>
							<Visible>0</Visible>
							<Font>
								<Name>terminal</Name>
								<Size>12</Size>
							</Font>
							<Texture />
							<SelectMultiple>0</SelectMultiple>
							<SelectionColor>FF002026</SelectionColor>
							<Sort>User</Sort>
							<AutoTooltip>Click and drag a POI to change its priority</AutoTooltip>
						</Listbox>
						<Text Name='Region Size Text' Template='EQ2.text'>
							<X>10%</X>
							<Y>270</Y>
							<Width>30%</Width>
							<Height>20</Height>
							<Text>Region Size: </text>
						</Text>
						<Textentry Name='Region Size' Template='EQ2.textentry'>
							<X>26%</X>
							<Y>270</Y>
							<Width>5%</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
							<MaxLength>3</MaxLength>
							<OnLoad>This:SetText[${Script[EQ2Bot].Variable[BoxWidth]}]</OnLoad>
							<OnChange>
								SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings]:Set[Navigation: Size of Box?,${This.Text}]:Save
								This:SetText[${SettingXML[Scripts/EQ2Bot/Character Config/${Me.Name}.xml].Set[General Settings].GetInt[Navigation: Size of Box?]}]
								Script[EQ2Bot].Variable[BoxWidth]:Set[${This.Text}]
							</OnChange>
						</Textentry>
						<Text Name='Region Count' Template='EQ2.text'>
							<X>40%</X>
							<Y>270</Y>
							<Width>60%</Width>
							<Height>20</Height>
							<Text>Number of Regions Created: ${Script[EQ2Bot].VariableScope.RegionCount}</text>
						</Text>
					</Tab>
				</Tabs>
			</Tabcontrol>
		</Children>
	</Window>
</ISUI>