<?xml version="1.0" encoding="UTF-8"?>
<ISUI><!-- Main UI Window -->

	<!-- Font -->
	<Template Name="VG.Font">
		<Name>Tahoma</Name>
		<Size>14</Size>
		<Color>FF100000</Color>
	</Template>
	<Template Name="VG.BoldFont" Template="VG.Font">
		<Bold />
	</Template>

	<!-- Text -->
	<template name="VG.Text.Font" Template="VG.Font" />
	<template name="VG.Text">
		<Font Template="VG.Text.Font" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>
	<template name="VG.BoldText">
		<Font Template="VG.BoldFont" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>

	<!-- Green CheckBox -->
	<Template Name="VG.GreenCheckbox">
		<Font Template="VG.Checkbox.Font" />
		<Texture Template="VG.Checkbox.Texture" />
		<TextureHover Template="VG.Checkbox.TextureHover" />
		<TexturePressed Template="VG.Checkbox.TexturePressed" />
		<TextureChecked Template="VG.Checkbox.TextureChecked" />
		<TextureCheckedHover Template="VG.Checkbox.TextureCheckedHover" />
		<TextureCheckedPressed Template="VG.Checkbox.TextureCheckedPressed" />
	</Template>
	
	<!-- Grey CommandBox -->
	<Template Name="VG.GreyCommandButton">
		<Font Template="vg.button.Font" />
		<Texture Template="vg.button.Texture" />
		<TextureHover Template="vg.button.TextureHover" />
		<TexturePressed Template="vg.button.TexturePressed" />
	</Template>
	
	<!-- Window Name: (VG-DK) -->
	<Window Name="VG-DK" Template="VG.Window">
		<!-- Basic Window Information -->
		<StorePosition>1</StorePosition>
		<X>100</X>
		<Y>100</Y>
		<Width>350</Width>
		<Height>300</Height>
		<Title>VG-DK</Title>
		<TitleBar Template="VG.Window.TitleBar">
			<X>0</X>
			<Y>0</Y>
			<Width>99%</Width>
			<Height>18</Height>
			<Children>
				<!-- Centered -->
				<Text Name="Title" Template="VG.Window.TitleBar.Title">
					<X>18</X>
					<Alignment>Center</Alignment>
				</Text>
				<!-- Minimize -->
				<Button Name="Minimize" Template="VG.Window.TitleBar.Minimize">
					<X>1</X>
					<Width>16</Width>
					<Height>16</Height>
				</Button>
				<!-- Close -->
				<CommandButton Name="Custom Quit Button" Template="VG.Window.TitleBar.Close">
					<X>r17</X>
					<Width>16</Width>
					<Height>16</Height>
					<OnLeftClick>
						Script[VG-DK].Variable[isRunning]:Set[FALSE]
						endscript VG-DK 
					</OnLeftClick>
				</CommandButton>
			</Children>
		</TitleBar>
		<!-- Nothing fancy for Window Client -->
		<Client Template="VG.Window.Client" />
<!--		
		<Client Template="VG.Window.Client">
			<Y>18</Y>
			<Height>r18</Height>
			<Texture Template="VG.TabControl.FrameTexture" />
		</Client>

-->		
		<Children>
			<!-- Tab: (Tabs) -->
			<TabControl Name="Tabs" Template="VG.Tabcontrol">
				<X>5</X>
				<Y>5</Y>
				<Font>
					<Name>Times New Roman</Name>
					<Size>14</Size>
				</Font>
				<OnSelect>
				</OnSelect>
				<TabHeight>20</TabHeight>
				<TabBorder>3</TabBorder>
				<Height>72%</Height>
				<Width>97%</Width>
				<Tabs>

					<!-- Tab Name: (Main) -->
					<Tab Name="Main">
						<Text Name="Text-Toggles" Template="VG.BoldText">
							<X>3%</X>
							<Y>6%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>TOGGLES:</Text>
						</Text>

						<checkbox Name="doFace" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>14%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Face</Text>
							<AutoTooltip>  face your target </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doFace}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doFace:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doMove" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>25%</X>
							<Y>14%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Move</Text>
							<AutoTooltip>  move to 5 or 25 meters of target </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doMove}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doMove:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doHunt" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>46%</X>
							<Y>14%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Hunt</Text>
							<AutoTooltip>  hunt targets in area based on settings in Hunt tab </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doHunt}
								{
									This:SetChecked
									UIElement[doHunt@Hunt@Tabs@VG-DK]:SetText[Stop Hunting]
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doHunt:Set[${This.Checked}]
								if ${Script[VG-DK].VariableScope.doHunt}
								{
									UIElement[doHunt@Hunt@Tabs@VG-DK]:SetText[Stop Hunting]
									Script[VG-DK].Variable[HomeX]:Set[${Me.X}]
									Script[VG-DK].Variable[HomeY]:Set[${Me.Y}]
									Script[VG-DK].Variable[HomeZ]:Set[${Me.Z}]
								}
								else
								{
									UIElement[doHunt@Hunt@Tabs@VG-DK]:SetText[Start Hunting]
								}
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doAutoAssist" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>72%</X>
							<Y>14%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Auto Assist</Text>
							<AutoTooltip>  assist anyone that is in combat and cycle through encounter list </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doAutoAssist}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doAutoAssist:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<checkbox Name="doAutoRez" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>23%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>AutoRez</Text>
							<AutoTooltip>  automatically accept incoming rez's </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doAutoRez}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doAutoRez:Set[${This.Checked}]
								;UIElement[doRemoveHate@Misc@Tabs@VG-DK]:ToggleChecked
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doAutoRepair" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>25%</X>
							<Y>23%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Repair</Text>
							<AutoTooltip>  automatically repair your equipment </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doAutoRepair}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doAutoRepair:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doConsumables" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>46%</X>
							<Y>23%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Consumables</Text>
							<AutoTooltip>  use consumables to restore health and energy, use conduct </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doConsumables}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doConsumables:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doSprint" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>72%</X>
							<Y>23%</Y>
							<Width>15</Width>
							<Height>14</Height>
							<Text>Sprint</Text>
							<AutoTooltip>  adjust speed up to 100% </AutoTooltip>
							<OnLoad>
								if ${Me.IsSprinting}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								if ${Me.IsSprinting}
								{
									Me:Sprint
								}
								else
								{
									Me:Sprint[${Script[VG-DK].VariableScope.Speed}]
								}
							</OnLeftClick>
						</checkbox>
						<Textentry Name="SpeedEntry" Template="VG.TextEntry">
							<X>88%</X>
							<Y>23%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-DK].VariableScope.Speed}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-DK].VariableScope.Speed:Set[0]
								}
								if ${This.Text.Length} > 0
								{
									if ${Math.Calc[${This.Text}].Int} > 100
									{
										Script[VG-DK].VariableScope.Speed:Set[100]
										This:SetText[100]
									}
									Script[VG-DK].VariableScope.Speed:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name='doLoot' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3%</X>
							<Y>32%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Loot</Text>
							<AutoTooltip>  loot corpses </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doLoot}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doLoot:Set[${This.Checked}]
								UIElement[doLoot@Loot@Tabs@VG-DK]:ToggleChecked
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doCancelBuffs' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>25%</X>
							<Y>32%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Kill Buffs</Text>
							<AutoTooltip>  Remove buffs: Superior Gift of Peace, Blessing of Tranquility, Gift of Peace, Stormcaller's Fury </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doCancelBuffs}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doCancelBuffs:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doSound' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>46%</X>
							<Y>32%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Sound</Text>
							<AutoTooltip>  Turn off sound from tells and says with you name in it </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doSound}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doSound:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doShadowStep' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>72%</X>
							<Y>32%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>ShadowStep</Text>
							<AutoTooltip>  Use ShadowStep and Cull for heals </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doShadowStep}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doShadowStep:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doMisc' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>72%</X>
							<Y>41%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>MISC</Text>
							<AutoTooltip>  Misc abilities as Despoil, Abyssal Chains, and Soul Consumption </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doMisc}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doMisc:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<Text Name="Text-UseAbility" Template="VG.BoldText">
							<X>3%</X>
							<Y>45%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>USE ABILITIES:</Text>
						</Text>

						<checkbox Name='doPhysical' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3%</X>
							<Y>53%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Physical</Text>
							<AutoTooltip>  use Physical type abilities </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doPhysical}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doPhysical:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doSpiritual' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>28%</X>
							<Y>53%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Spiritual</Text>
							<AutoTooltip>  use Spiritual type abilities </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doSpiritual}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doSpiritual:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doRanged' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>53%</X>
							<Y>53%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Ranged</Text>
							<AutoTooltip>  use Ranged weapons </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doRanged}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doRanged:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doHatred' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>76%</X>
							<Y>53%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Hatred/AE</Text>
							<AutoTooltip>  use AE and Hatred abilities </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doHatred}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doHatred:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name='doMelee' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3%</X>
							<Y>62%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Melee</Text>
							<AutoTooltip>  use Melee abilities </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doMelee}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doMelee:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name='doRescues' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>28%</X>
							<Y>62%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Rescues</Text>
							<AutoTooltip>  use Rescues </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doRescues}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doRescues:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doCounters' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>53%</X>
							<Y>62%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Counters</Text>
							<AutoTooltip>  use Counters </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doCounters}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doCounters:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doChains' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>76%</X>
							<Y>62%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Chains</Text>
							<AutoTooltip>  use Chains and associated combos </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doChains}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doChains:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Commandbutton Name="Button-Set Tank" Template="VG.GreenCommandButton">
							<visible>1</visible>
							<X>10%</X>
							<Y>72%</Y>
							<Width>80%</Width>
							<Height>17</Height>
							<Text>Assist:  </Text>
							<AutoTooltip>  Always assist this player </AutoTooltip>
							<Onload>
								if ${Me.DTarget(exists)}
								{
									Script[VG-DK].Variable[Tank]:Set[${Me.DTarget.Name}]
									This:SetText[Assist:  ${Me.DTarget.Name}]
								}
								else
								{
									Script[VG-DK].Variable[Tank]:Set[${Me.FName}]
									This:SetText[Assist:  ${Me.FName}]
								}
							</Onload>
							<OnLeftClick>
								if ${Me.DTarget(exists)}
								{
									Script[VG-DK].Variable[Tank]:Set[${Me.DTarget.Name}]
									This:SetText[Assist:  ${Me.DTarget.Name}]
								}
								else
								{
									Script[VG-DK].Variable[Tank]:Set[${Me.FName}]
									This:SetText[Assist:  ${Me.FName}]
								}
							</OnLeftClick>
						</Commandbutton>
						
						
						<Text Name="Combat Form Text" Template="VG.BoldText">
							<X>3%</X>
							<Y>81%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>COMBAT FORM:</Text>
						</Text>
						<ComboBox name="Combat Form" template="VG.ComboBox">
							<visible>1</visible>
							<X>3%</X>
							<Y>88%</Y>
							<Width>45%</Width>
							<Height>18</Height>
							<Sort>None</Sort>
							<Items>
								<Item value='1' default='1'>1    Armor of Darkness</Item>
								<Item value='2'>2    Ebon Blade</Item>
								<Item value='3'>3    Shadow Meld</Item>
							</Items>
							<OnSelect>
								if ${This.Selection}==1
								{
									Script[VG-DK].Variable[CombatForm]:Set[Armor of Darkness]
								}
								if ${This.Selection}==2
								{
									Script[VG-DK].Variable[CombatForm]:Set[Armor of Darkness]
									if ${Me.Form[Ebon Blade](exists)}
									{
										Script[VG-DK].Variable[CombatForm]:Set[Ebon Blade]
									}
								}
								if ${This.Selection}==3
								{
									Script[VG-DK].Variable[CombatForm]:Set[Armor of Darkness]
									if ${Me.Form[Shadow Meld](exists)}
									{
										Script[VG-DK].Variable[CombatForm]:Set[Shadow Meld]
									}
								}
							</OnSelect>
						</ComboBox>
						
						<Text Name="Non-Combat Form Text" Template="VG.BoldText">
							<X>55%</X>
							<Y>81%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>OUT OF COMBAT FORM:</Text>
						</Text>
						<ComboBox name="Non-Combat Form" template="VG.ComboBox">
							<visible>1</visible>
							<X>55%</X>
							<Y>88%</Y>
							<Width>45%</Width>
							<Height>18</Height>
							<Sort>None</Sort>
							<Items>
								<Item value='1' default='1'>1    Armor of Darkness</Item>
								<Item value='2'>2    Ebon Blade</Item>
								<Item value='3'>3    Shadow Meld</Item>
							</Items>
							<OnSelect>
								if ${This.Selection}==1
								{
									Script[VG-DK].Variable[NonCombatForm]:Set[Armor of Darkness]
								}
								if ${This.Selection}==2
								{
									Script[VG-DK].Variable[NonCombatForm]:Set[Armor of Darkness]
									if ${Me.Form[Ebon Blade](exists)}
									{
										Script[VG-DK].Variable[NonCombatForm]:Set[Ebon Blade]
									}
								}
								if ${This.Selection}==3
								{
									Script[VG-DK].Variable[NonCombatForm]:Set[Armor of Darkness]
									if ${Me.Form[Shadow Meld](exists)}
									{
										Script[VG-DK].Variable[NonCombatForm]:Set[Shadow Meld]
									}
								}
							</OnSelect>
						</ComboBox>
						
					</Tab>
					
					<!-- Tab Name: (Attack) -->
					<Tab name='Attack'>
						<Text Name="Text-Counters" Template="VG.BoldText">
							<X>3%</X>
							<Y>3%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>COUNTERS:</Text>
						</Text>
						<checkbox Name="doRetaliate" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>11%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Retaliate</Text>
							<AutoTooltip>  Adds hatred </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doRetaliate}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doRetaliate:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doVengeance" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>20%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Vengeance</Text>
							<AutoTooltip>  3 second stun </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doVengeance}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doVengeance:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<Text Name="Text-Aggro" Template="VG.BoldText">
							<X>28%</X>
							<Y>3%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>HATRED/AE:</Text>
						</Text>
						<checkbox Name="doProvoke" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>28%</X>
							<Y>11%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Provoke</Text>
							<AutoTooltip>  increase hatred every 8 seconds </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doProvoke}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doProvoke:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doTorture" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>28%</X>
							<Y>20%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Torture</Text>
							<AutoTooltip>  a DOT that increases hatred over 32 seconds </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doTorture}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doTorture:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doBlackWind" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>28%</X>
							<Y>29%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Black Wind (AE)</Text>
							<AutoTooltip>  increase hatred to all targets within 10m infront of me </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doBlackWind}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doBlackWind:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doScytheOfDoom" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>28%</X>
							<Y>38%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>ScytheOfDoom(AE)</Text>
							<AutoTooltip>  transfer health from 6 targets within 10m infront of me </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doScytheOfDoom}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doScytheOfDoom:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						
						<Text Name="Text-Rescues" Template="VG.BoldText">
							<X>65%</X>
							<Y>3%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>RESCUES:</Text>
						</Text>
						<checkbox Name="doSeethingHatred" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>11%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Seething Hatred</Text>
							<AutoTooltip>  force opponent to attack me for 6 attacks </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doSeethingHatred}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doSeethingHatred:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doScourge" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>20%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Scourge</Text>
							<AutoTooltip>  force DTarget's opponent to attack me for 2 attacks </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doScourge}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doScourge:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doNexusOfHatred" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>29%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Nexus of Hatred</Text>
							<AutoTooltip>  force all targets 10m of my target to attack me for 4-8 attacks </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doNexusOfHatred}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doNexusOfHatred:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<Text Name="Text-Chains" Template="VG.BoldText">
							<X>3%</X>
							<Y>45%</Y>
							<Width>99%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>CHAINS:</Text>
						</Text>
						<checkbox Name="doHexOfIllOmen" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>53%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Hex of Ill Omen</Text>
							<AutoTooltip>  Spiritual Finishers </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doHexOfIllOmen}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doHexOfIllOmen:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doIncite" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>62%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Incite</Text>
							<AutoTooltip>  adds extreme amount of hatred </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doIncite}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doIncite:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doShieldOfFear" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>71%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Shield of Fear</Text>
							<AutoTooltip>  Adds to block, damage, and AC </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doShieldOfFear}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doShieldOfFear:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doVileStrike" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>80%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Vile Strike</Text>
							<AutoTooltip>  Restores some energy </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doVileStrike}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doVileStrike:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doWrack" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>89%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Wrack</Text>
							<AutoTooltip>  +400% damage </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doWrack}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doWrack:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<Text Name="Text-Misc" Template="VG.BoldText">
							<X>35%</X>
							<Y>65%</Y>
							<Width>99%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>MISC:</Text>
						</Text>
						<checkbox Name="doDespoil" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>35%</X>
							<Y>73%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Despoil</Text>
							<AutoTooltip>  Remove Enchantments </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doDespoil}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doDespoil:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doAbyssalChains" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>35%</X>
							<Y>82%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>AbyssalChains</Text>
							<AutoTooltip>  Snare your target slowing them down </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doAbyssalChains}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doAbyssalChains:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doDeBuff" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>35%</X>
							<Y>91%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>DeBuff</Text>
							<AutoTooltip>  Soul Consumption or Devour Mind and Strength </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doDeBuff}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doDeBuff:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>


						
						<Text Name="Text-Melee" Template="VG.BoldText">
							<X>67%</X>
							<Y>38%</Y>
							<Width>99%</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>MELEE:</Text>
						</Text>
						<checkbox Name="doVexingStrike" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>46%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Vexing Strike</Text>
							<AutoTooltip>  increases DC </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doVexingStrike}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doVexingStrike:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doMalice" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>55%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Malice</Text>
							<AutoTooltip>  exploits Soul Wracked </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doMalice}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doMalice:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doMutilate" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>64%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Mutilate</Text>
							<AutoTooltip>  +400% damage </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doMutilate}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doMutilate:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doRavagingDarkness" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>73%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Ravaging Darkness</Text>
							<AutoTooltip>  drains endurance and exploits Soul Wracked </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doRavagingDarkness}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doRavagingDarkness:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doSlay" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>82%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Slay</Text>
							<AutoTooltip>  +400% damage, roots 6 sec </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doSlay}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doSlay:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doBacklash" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>65%</X>
							<Y>91%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Backlash</Text>
							<AutoTooltip>  Automatically strike back the enemy </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doBacklash}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doBacklash:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
					</Tab>

					<!-- Tab Name: (Loot) -->
					<Tab Name="Loot">
						<checkbox Name="doLoot" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>7%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Loot corpse with a delay of            milliseconds</Text>
							<AutoTooltip>  enabling this will allow you to loot corpses </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doLoot}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doLoot:Set[${This.Checked}]
								UIElement[doLoot@Main@Tabs@VG-DK]:ToggleChecked
							</OnLeftClick>
						</checkbox>
						<Textentry Name="LootDelay" Template="VG.TextEntry">
							<X>55%</X>
							<Y>6%</Y>
							<Width>30</Width>
							<Height>17</Height>
							<Color>FFDDBB00</Color>
							<OnLoad>
								This:SetText[${Script[VG-DK].VariableScope.LootDelay}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-DK].VariableScope.LootDelay:Set[0]
								}
								if ${This.Text.Length} > 0
								{
									if ${Math.Calc[${This.Text}].Int} > 100
									{
										Script[VG-DK].VariableScope.LootDelay:Set[100]
										This:SetText[100]
									}
									Script[VG-DK].VariableScope.LootDelay:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name="doRaidLoot" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>16%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Raid Loot (DANGER)</Text>
							<AutoTooltip>  this will allow looting if you are in a Raid </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doRaidLoot}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doRaidLoot:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doLootEcho" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>25%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>VGEcho what you looted</Text>
							<AutoTooltip>  enabling this will echo what you looted to your chat window, nobody sees it but you </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doLootEcho}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doLootEcho:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doLootInCombat' Template='VG.GreenCheckbox'>
							<visible>4</visible>
							<X>3%</X>
							<Y>34%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Loot while in Combat</Text>
							<AutoTooltip>  enabling this will allow you to loot during combat </AutoTooltip>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doLootInCombat}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doLootInCombat:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doLootOnly' Template='VG.GreenCheckbox'>
							<visible>4</visible>
							<X>3%</X>
							<Y>43%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Loot Only</Text>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doLootOnly}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doLootOnly:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name='LootOnlyEntry' Template='VG.TextEntry'>
							<X>27%</X>
							<Y>43%</Y>
							<Width>70%</Width>
							<Height>16</Height>
							<Color>FFDDBB00</Color>
							<SelectionColor>FF000000</SelectionColor>
							<Border>2</Border>
							<OnLoad>
								This:SetText[${Script[VG-DK].VariableScope.LootOnly}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
									Script[VG-DK].VariableScope.LootOnly:Set[${This.Text}]
								}
							</OnChange>
						</Textentry>
					</Tab>

					<!-- Tab Name: (Hunt) -->
					<Tab name='Hunt'>
						<commandbutton name="doHunt" Template="VG.GreyCommandButton">
							<visible>1</visible>
							<X>30%</X>
							<Y>7%</Y>
							<Width>40%</Width>
							<Height>22</Height>
							<Text>Start Hunting</Text>
							<OnLeftClick>
								if ${Script[VG-DK].Variable[doHunt]}
								{
									This:SetText[Start Hunting]
									Script[VG-DK].Variable[doHunt]:Set[FALSE]
									UIElement[doHunt@Main@Tabs@VG-DK]:ToggleChecked
								}
								elseif !${Script[VG-DK].Variable[doHunt]}
								{
									This:SetText[Stop Hunting]
									UIElement[doHunt@Main@Tabs@VG-DK]:ToggleChecked
									Script[VG-DK].Variable[doHunt]:Set[TRUE]
									Script[VG-DK].Variable[HomeX]:Set[${Me.X}]
									Script[VG-DK].Variable[HomeY]:Set[${Me.Y}]
									Script[VG-DK].Variable[HomeZ]:Set[${Me.Z}]
								}
							</OnLeftClick>
						</commandbutton>
						<Text Name='minLevelText' Template='VG.BoldText'>
							<X>20%</X>
							<Y>33%</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Min mob level</Text>
						</Text>
						<Textentry Name='MobMinLevel' Template='VG.TextEntry'>
							<X>3%</X>
							<Y>33%</Y>
							<Width>40</Width>
							<Height>15</Height>
							<AutoTooltip>  Minimum Level of Mob</AutoTooltip>
							<OnLoad>
								This:SetText[${Script[VG-DK].VariableScope.MobMinLevel}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} == 0
								{
										Script[VG-DK].VariableScope.MobMinLevel:Set[0]
								}
								if ${This.Text.Length} > 0
								{
									if ${Math.Calc[${This.Text}].Int} > 60
									{
										Script[VG-DK].VariableScope.MobMinLevel:Set[60]
										This:SetText[60]
									}
									Script[VG-DK].VariableScope.MobMinLevel:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<Text Name='maxLevelText' Template='VG.BoldText'>
							<X>20%</X>
							<Y>46%</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Max mob level</Text>
						</Text>
						<Textentry Name='MaxLevelT' Template='VG.TextEntry'>
							<X>3%</X>
							<Y>46%</Y>
							<Width>40</Width>
							<Height>15</Height>
							<AutoTooltip>  Maximum Level of Mob</AutoTooltip>
							<OnLoad>
								This:SetText[${Script[VG-DK].VariableScope.MobMaxLevel}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} == 0
								{
										Script[VG-DK].VariableScope.MobMaxLevel:Set[0]
								}
								if ${This.Text.Length} > 0
								{
									if ${Math.Calc[${This.Text}].Int} > 60
									{
										Script[VG-DK].VariableScope.MobMaxLevel:Set[60]
										This:SetText[60]
									}
									Script[VG-DK].VariableScope.MobMaxLevel:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<Text Name='ConCheckText' Template='VG.BoldText'>
							<X>20%</X>
							<Y>59%</Y>
							<Width>180</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Max DOT/Con/Difficulty level</Text>
						</Text>
						<Textentry Name='ConCheckT' Template='VG.TextEntry'>
							<X>3%</X>
							<Y>59%</Y>
							<Width>40</Width>
							<Height>15</Height>
							<AutoTooltip>  Number to Add to your level</AutoTooltip>
							<OnLoad>
								This:SetText[${Script[VG-DK].VariableScope.ConCheck}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} == 0
								{
										Script[VG-DK].VariableScope.ConCheck:Set[0]
								}
								if ${This.Text.Length} > 0
								{
									if ${Math.Calc[${This.Text}].Int} > 10
									{
										Script[VG-DK].VariableScope.ConCheck:Set[10]
										This:SetText[10]
									}
									Script[VG-DK].VariableScope.ConCheck:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
							<Text Name='DistanceText' Template='VG.BoldText'>
							<X>20%</X>
							<Y>72%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>MAX distance to Hunt</Text>
						</Text>
						<Textentry Name='DistanceT' Template='VG.TextEntry'>
							<X>3%</X>
							<Y>72%</Y>
							<Width>40</Width>
							<Height>15</Height>
							<AutoTooltip>  roaming distance to hunt </AutoTooltip>
							<OnLoad>
								This:SetText[${Script[VG-DK].VariableScope.Distance}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} == 0
								{
										Script[VG-DK].VariableScope.Distance:Set[0]
								}
								if ${This.Text.Length} > 0
								{
									if ${Math.Calc[${This.Text}].Int} > 9999
									{
										Script[VG-DK].VariableScope.Distance:Set[9999]
										This:SetText[9999]
									}
									Script[VG-DK].VariableScope.Distance:Set[${Math.Calc[${This.Text}].Int}]
								}

							</OnChange>
						</Textentry>
						<commandcheckbox name='Radar' Template='VG.GreenCheckbox'>
							<X>6%</X>
							<Y>85%</Y>
							<Width>20</Width>
							<Height>20</Height>
							<Text> </Text>
							<Command>ui -load ./extensions/isxvgradar</Command>
							<CommandChecked>ui -unload ./extensions/isxvgradar</CommandChecked>
							<Data>${UIElement[Radar Window](exists)}</Data>
						</commandcheckbox>
						<Text Name="RadarText" Template="VG.BoldText">
							<X>50</X>
							<Y>87%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Show Radar</Text>
						</Text>
					</Tab>

					<!-- Tab Name: (Misc) -->
					<Tab Name="Misc">
						<checkbox Name='doFollow' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3%</X>
							<Y>7%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text> </Text>
							<OnLoad>
								if ${Script[VG-DK].VariableScope.doFollow}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-DK].VariableScope.doFollow:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Commandbutton Name='Set Follow' Template='VG.GreenCommandButton'>
							<visible>6</visible>
							<X>10%</X>
							<Y>6%</Y>
							<Text>Set</Text>
							<Width>40</Width> 
							<Height>18</Height>
							<OnLeftClick>
								Script[VG-DK].Variable[FollowName]:Set[${Me.DTarget.Name}]
								Script[VG-DK].Variable[FollowID]:Set[${Me.DTarget.ID}]
							</OnLeftClick>
						</Commandbutton>
						<Text Name="Follow Name" Template="VG.BoldText">
							<X>25%</X>
							<Y>7%</Y>
							<Width>85%</Width>
							<Height>25</Height>
							<Text> </Text>
						</Text>
					</Tab>
					
					<!-- Tab Name: (About) -->
					<Tab name='About'>
						<Text Name='About Line 1'>
							<X>0</X>
							<Y>12%</Y>
							<Width>100%</Width>
							<Height>80%</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>16</Size>
							</Font>
						<!--	<Text>Tool for Dread Knights v${Script[VG-DK].Variable[Version]}</Text> -->
							<Text>Tool for Dread Knights v1.0</Text>
						</Text>
						<Text Name='About Line 2'>
							<X>0</X>
							<Y>33%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>14</Size>
							</Font>
							<Text>by Zandros</Text>
						</Text>
						<Text Name='About Line 3'>
							<X>0</X>
							<Y>50%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>12</Size>
							</Font>
							<Text>Special thanks to all you programmers</Text>
						</Text>
						<Text Name='About Line 4'>
							<X>0</X>
							<Y>57%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>12</Size>
							</Font>
							<Text>that shared your ideas and talents!</Text>
						</Text>
					</Tab>
				</Tabs>
			</TabControl>


			<!-- Outside the tab: (Tabs) -->
			
			
			<Text Name="Text-Status" Template="VG.BoldText">
				<visible>1</visible>
				<X>2%</X>
				<Y>75%</Y>
				<Width>98%</Width>
				<Height>20</Height>
				<Font Template="VG.Text.Font">
					<Color>FFDDBB00</Color>
				</Font>
			<!--	<Text> Current Action:  ${Script[VG-DK].Variable[CurrentAction]}</Text>  -->
				<Text></Text>
			</Text>
			<Text Name="Text-Immune" Template="VG.BoldText">
				<visible>1</visible>
				<X>2%</X>
				<Y>80%</Y>
				<Width>275</Width>
				<Height>20</Height>
				<Font Template="VG.Text.Font">
					<Color>FFDDBB00</Color>
				</Font>
			<!--	<Text> Target's Immunity:  ${Script[VG-DK].Variable[TargetImmunity]}</Text>  -->
				<Text></Text>
			</Text>
			<Text Name="Text-TOT" Template="VG.BoldText">
				<visible>1</visible>
				<X>2%</X>
				<Y>85%</Y>
				<Width>275</Width>
				<Height>20</Height>
				<Font Template="VG.Text.Font">
					<Color>FFDDBB00</Color>
				</Font>
			<!--	<Text> Target's Target:  ${Script[VG-DK].Variable[TargetsTarget]}</Text>  -->
				<Text></Text>
			</Text>
			<Commandbutton Name="Run Button" Template="VG.GreyCommandButton">
				<visible>1</visible>
				<X>3%</X>
				<Y>90.5%</Y>
				<Width>45%</Width>
				<Height>23</Height>
				<Text>This script is PAUSED</Text>
				<OnLeftClick>
					if ${Script[VG-DK].Variable[isPaused]}
					{
						Script[VG-DK].Variable[isPaused]:Set[FALSE]
						This:SetText[This script is RUNNING]
					}
					elseif !${Script[VG-DK].Variable[isPaused]}
					{
						Script[VG-DK].Variable[isPaused]:Set[TRUE]
						This:SetText[This script is Paused]
						VG:ExecBinding[moveforward,release]
						VG:ExecBinding[movebackward,release]
					}
				</OnLeftClick>
			</Commandbutton>
			<Commandbutton Name="DPS" Template="VG.GreyCommandButton">
				<visible>1</visible>
				<X>70%</X>
				<Y>90.5%</Y>
				<Width>25%</Width>
				<Height>23</Height>
				<Text>DPS</Text>
				<AutoTooltip>  DPS - QJ, Word of Doom, Slay, Ebony Blade </AutoTooltip>
				<OnLeftClick>
					Script[VG-DK]:QueueCommand[call DPS]
				</OnLeftClick>
			</Commandbutton>
		</Children>
	</Window>
</ISUI>
