<?xml version="1.0" encoding="UTF-8"?>
<ISUI><!-- Main UI Window -->

	<!-- Font -->
	<Template Name="VG.Font">
		<Name>Tahoma</Name>
		<Size>14</Size>
		<Color>FF100000</Color>
	</Template>
	<Template Name="VG.BoldFont" Template="VG.Font">
		<Bold />
	</Template>

	<!-- Text -->
	<template name="VG.Text.Font" Template="VG.Font" />
	<template name="VG.Text">
		<Font Template="VG.Text.Font" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>
	<template name="VG.BoldText">
		<Font Template="VG.BoldFont" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>

	<!-- Green CheckBox -->
	<Template Name="VG.GreenCheckbox">
		<Font Template="VG.Checkbox.Font" />
		<Texture Template="VG.Checkbox.Texture" />
		<TextureHover Template="VG.Checkbox.TextureHover" />
		<TexturePressed Template="VG.Checkbox.TexturePressed" />
		<TextureChecked Template="VG.Checkbox.TextureChecked" />
		<TextureCheckedHover Template="VG.Checkbox.TextureCheckedHover" />
		<TextureCheckedPressed Template="VG.Checkbox.TextureCheckedPressed" />
	</Template>
	
	<!-- Grey CommandBox -->
	<Template Name="VG.GreyCommandButton">
		<Font Template="vg.button.Font" />
		<Texture Template="vg.button.Texture" />
		<TextureHover Template="vg.button.TextureHover" />
		<TexturePressed Template="vg.button.TexturePressed" />
	</Template>
	
	<!-- Window Name: (Tools) -->
	<Window Name="Tools" Template="VG.Window">
		<!-- Basic Window Information -->
		<StorePosition>1</StorePosition>
		<X>100</X>
		<Y>100</Y>
		<Width>220</Width>
		<Height>500</Height>
		<Title>Tools</Title>
		<TitleBar Template="VG.Window.TitleBar">
			<X>0</X>
			<Y>0</Y>
			<Width>99%</Width>
			<Height>18</Height>
			<Children>
				<!-- Centered -->
				<Text Name="Title" Template="VG.Window.TitleBar.Title">
					<X>18</X>
					<Alignment>Center</Alignment>
				</Text>
				<!-- Minimize -->
				<Button Name="Minimize" Template="VG.Window.TitleBar.Minimize">
					<X>1</X>
					<Width>16</Width>
					<Height>16</Height>
				</Button>
				<!-- Close -->
				<CommandButton Name="Custom Quit Button" Template="VG.Window.TitleBar.Close">
					<X>r17</X>
					<Width>16</Width>
					<Height>16</Height>
					<OnLeftClick>
						Script[Tools].Variable[isRunning]:Set[FALSE]
						endscript Tools 
					</OnLeftClick>
				</CommandButton>
			</Children>
		</TitleBar>

		<!-- Nothing fancy for Window Client -->
		<Client Template="VG.Window.Client" />

		<Children>
			<!--main tab control-->
			<TabControl name='DPS' Template='VG.Tabcontrol'>
				<X>0</X>
				<Y>3</Y>
				<Font>
					<Name>Arial</Name>
					<Size>12</Size>
				</Font>
				<TabHeight>18</TabHeight>
				<TabBorder>2</TabBorder>
				<Height>99%</Height>
				<Width>99%</Width>
				<Tabs>
					<!--Top Level Main Tab-->
					<Tab name='Main'>
 						<Text Name='txtAbilities' Template='VG.BoldText'>
							<X>8%</X>
							<Y>2%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>====== Toggles ======  </Text>
						</Text>
						<checkbox Name="doUseAbilities" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>5%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Use Abilities</Text>
							<AutoTooltip> Use abilities On/Off </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doUseAbilities}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doUseAbilities:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doUseItems" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>9%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Use Items</Text>
							<AutoTooltip> Use items On/Off - put the item on your hotbar </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doUseItems}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doUseItems:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doCounter1" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>13%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Counter1: ${Script[Tools].VariableScope.CounterA}</Text>
							<AutoTooltip> Use this counter when available </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doCounter1}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doCounter1:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doCounter2" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>17%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Counter2: ${Script[Tools].VariableScope.CounterB}</Text>
							<AutoTooltip> Use this counter when available </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doCounter2}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doCounter2:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doPushStance" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>21%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Stance: ${Script[Tools].VariableScope.PushStance}</Text>
							<AutoTooltip> Push Stances</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doPushStance}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doPushStance:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<checkbox Name="doStripEnchantments" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>25%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Strip: ${Script[Tools].VariableScope.StripEnchantment}</Text>
							<AutoTooltip> Strip Enchantments</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doStripEnchantments}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doStripEnchantments:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<checkbox Name="doForage" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>29%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Forage: ${Script[Tools].VariableScope.Forage}</Text>
							<AutoTooltip> Forage area after battle</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doForage}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doForage:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<checkbox Name="doAutoAttack" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>33%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> AutoAttack On/Off</Text>
							<AutoTooltip> AutoAttack - also stops if FURIOUS</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doAutoAttack}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doAutoAttack:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doRangedAttack" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>37%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Ranged Attack On/Off</Text>
							<AutoTooltip> Use your Ranged Weapon when available</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doRangedAttack}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doRangedAttack:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doFace" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>41%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Face Target</Text>
							<AutoTooltip> Always face your target On/Off</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doFace}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doFace:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doAutoRepairs" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>45%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Auto Repair gear</Text>
							<AutoTooltip> Automatically target and repair gear when below 80%</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doAutoRepairs}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doAutoRepairs:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doAutoRez" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>49%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Auto Accept Rez</Text>
							<AutoTooltip> Automatically accept Rez</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doAutoRez}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doAutoRez:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doPhysical" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>65%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Physical</Text>
							<AutoTooltip> Toggle using physical abilities</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doPhysical}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doPhysical:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doArcane" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>36%</X>
							<Y>65%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Arcane</Text>
							<AutoTooltip> Toggle using arcane abilities</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doArcane}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doArcane:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doMental" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>67%</X>
							<Y>65%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Mental</Text>
							<AutoTooltip> Toggle using mental abilities</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doMental}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doMental:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doFire" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>69%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Fire</Text>
							<AutoTooltip> Toggle using fire abilities</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doFire}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doFire:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doIce" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>36%</X>
							<Y>69%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Cold/Ice</Text>
							<AutoTooltip> Toggle using cold/ice abilities</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doIce}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doIce:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doSpiritual" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>67%</X>
							<Y>69%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Spiritual</Text>
							<AutoTooltip> Toggle using spiritual abilities</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doSpiritual}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doSpiritual:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						
						<Textentry Name="StartAttack" Template="VG.TextEntry">
							<X>6%</X>
							<Y>75%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[Tools].VariableScope.StartAttack}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[Tools].VariableScope.StartAttack:Set[0]
								}
								if ${This.Text.Length} >= 3
								{
									This:SetText[100]
								}
								if ${This.Text.Length} > 0
								{
									Script[Tools].VariableScope.StartAttack:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<Text Name="Text-StartAttack" Template="VG.Text">
							<X>23%</X>
							<Y>75.2%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Start Attacking</Text>
						</Text>
						
						<checkbox Name="doFollow" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>80%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Follow Tank:</Text>
							<AutoTooltip>  be sure to adjust your Turn-Speed Multiplier in settings </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doFollow}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doFollow:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name="FollowDistance1" Template="VG.TextEntry">
							<X>50%</X>
							<Y>79.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[Tools].VariableScope.FollowDistance1}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[Tools].VariableScope.FollowDistance1:Set[3]
								}
								if ${This.Text.Length} > 2
								{
									This:SetText[45]
								}
								if ${This.Text.Length} > 0
								{
									if ${This.Text} > 45
									{
										This:SetText[45]
									}
									if  ${This.Text} > ${Script[Tools].VariableScope.FollowDistance2}
									{
										This:SetText[${Script[Tools].VariableScope.FollowDistance2}]
									}
									
									Script[Tools].VariableScope.FollowDistance1:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<Text Name="Text-Follow" Template="VG.Text">
							<X>65%</X>
							<Y>80%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>to</Text>
						</Text>
						<Textentry Name="FollowDistance2" Template="VG.TextEntry">
							<X>72%</X>
							<Y>79.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[Tools].VariableScope.FollowDistance2}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[Tools].VariableScope.FollowDistance2:Set[3]
								}
								if ${This.Text.Length} > 2
								{
									This:SetText[45]
								}
								if ${This.Text.Length} > 0
								{
									if ${This.Text} > 45
									{
										This:SetText[45]
									}
									if ${Script[Tools].VariableScope.FollowDistance1} > ${This.Text}
									{
										This:SetText[${Script[Tools].VariableScope.FollowDistance1}]
									}
									Script[Tools].VariableScope.FollowDistance2:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>

						<Commandbutton Name="Button-Set Tank" Template="VG.GreyCommandButton">
							<visible>1</visible>
							<X>6%</X>
							<Y>85%</Y>
							<Width>180</Width>
							<Height>30</Height>
							<Text>Tank:  </Text>
                            <Onload>
								if ${Me.DTarget(exists)}
								{
									Script[Tools].Variable[Tank]:Set[${Me.DTarget.Name}]
									This:SetText[Tank:  ${Me.DTarget.Name}]
								}
								else
								{
									Script[Tools].Variable[Tank]:Set[${Me.FName}]
									This:SetText[Tank:  ${Me.FName}]
								}
                            </Onload>
							<OnLeftClick>
								if ${Me.DTarget(exists)}
								{
									Script[Tools].Variable[Tank]:Set[${Me.DTarget.Name}]
									This:SetText[Tank:  ${Me.DTarget.Name}]
								}
								else
								{
									Script[Tools].Variable[Tank]:Set[${Me.FName}]
									This:SetText[Tank:  ${Me.FName}]
								}
							</OnLeftClick>
						</Commandbutton>

						<Button Name="PauseBtn" Template="VG.GreyCommandButton">
							<X>6%</X>
							<Y>92%</Y>
							<Width>180</Width>
							<Height>30</Height>
							<Text>Paused</Text>
							<Alignment>Center</Alignment>
							<OnLoad>
								if ${Script[Tools].Variable[isPaused]}
								{
									This:SetText[Paused]
									VG:ExecBinding[moveforward,release]
								}
								elseif !${Script[Tools].Variable[isPaused]}
								{
									This:SetText[Running]
								}
							</OnLoad>
							<OnLeftClick>
								if !${Script[Tools].VariableScope.isPaused}
								{ 
									Script[Tools].VariableScope.isPaused:Set[TRUE]
									This:SetText[Paused]
								}
								elseif ${Script[Tools].VariableScope.isPaused}
								{ 
									Script[Tools].VariableScope.isPaused:Set[FALSE]
									This:SetText[Running]
								}
							</OnLeftClick>
						</Button>
					</Tab>
					<Tab name='Abilities'>
						<Text Name='txtAbilities' Template='VG.BoldText'>
							<X>8%</X>
							<Y>2%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>===== Abilities =====  </Text>
						</Text>
						<ComboBox Name="AbilitiesCombo" Template="VG.ComboBox">
							<X>6%</X>
							<Y>5%</Y>
							<Width>180</Width>
							<Height>20</Height>
							<OnLoad>
								This:AddItem[NONE]
							</OnLoad>
							<OnSelect>
							if ${This.SelectedItem.Text(exists)}
							{
								Tools_AddAbilities "${This.SelectedItem.Text}"
								Tools_BuildAbilities
							}
							</OnSelect>
						</ComboBox>
						<Listbox Name="AbilitiesList" Template="VG.ListBox">
							<X>6%</X>
							<Y>9.5%</Y>
							<Width>180</Width>
							<Height>140</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>User</Sort>
							<OnLoad>
								Tools_BuildAbilities
							</OnLoad>
							<OnRightClick>
								Tools_RemoveAbilities "${This.SelectedItem}"
								This.SelectedItem:Remove
								Tools_BuildAbilities
							</OnRightClick>
						</Listbox>
						 <Text Name='txtItems' Template='VG.BoldText'>
							<X>8%</X>
							<Y>40%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>====== Items ====== </Text>
						</Text>
						<ComboBox Name="ItemsCombo" Template="VG.ComboBox">
							<X>6%</X>
							<Y>43%</Y>
							<Width>180</Width>
							<Height>20</Height>
							<OnLoad>
								This:AddItem[NONE]
							</OnLoad>
							<OnSelect>
								if ${This.SelectedItem.Text(exists)}
								{
									Tools_AddItems "${This.SelectedItem.Text}"
									Tools_BuildItems
								}
							</OnSelect>
						</ComboBox>
						<Listbox Name="ItemsList" Template="VG.ListBox">
							<X>6%</X>
							<Y>47.5%</Y>
							<Width>180</Width>
							<Height>40</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>User</Sort>
							<OnLoad>
								Tools_BuildItems
							</OnLoad>
							<OnRightClick>
								Tools_RemoveItems "${This.SelectedItem}"
								This.SelectedItem:Remove
								Tools_BuildItems
							</OnRightClick>
						</Listbox>
 						<Text Name='txtCombatForm' Template='VG.BoldText'>
							<X>8%</X>
							<Y>57%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>==== Combat Form ====  </Text>
						</Text>
						<ComboBox Name="CombatForm" Template="VG.ComboBox">
							<X>6%</X>
							<Y>60%</Y>
							<Width>180</Width>
							<Height>20</Height>
							<OnLoad>
								This:AddItem[NONE]
							</OnLoad>
							<OnSelect>
								Script[Tools].VariableScope.CombatForm:Set[${This.SelectedItem.Text}]
							</OnSelect>
						</ComboBox>
						<Text Name='txtNonCombatForm' Template='VG.BoldText'>
							<X>8%</X>
							<Y>65%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>=== NonCombat Form ===  </Text>
						</Text>
						<ComboBox Name="NonCombatForm" Template="VG.ComboBox">
							<X>6%</X>
							<Y>68%</Y>
							<Width>180</Width>
							<Height>20</Height>
							<OnLoad>
								This:AddItem[NONE]
							</OnLoad>
							<OnSelect>
								Script[Tools].VariableScope.NonCombatForm:Set[${This.SelectedItem.Text}]
							</OnSelect>
						</ComboBox>
						 <Text Name='txtBuffs' Template='VG.BoldText'>
							<X>8%</X>
							<Y>74%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>======= Buffs =======  </Text>
						</Text>
						<ComboBox Name="BuffsCombo" Template="VG.ComboBox">
							<X>6%</X>
							<Y>77%</Y>
							<Width>180</Width>
							<Height>20</Height>
							<OnLoad>
								This:AddItem[NONE]
							</OnLoad>
							<OnSelect>
								if ${This.SelectedItem.Text(exists)}
								{
									Tools_AddBuff "${This.SelectedItem.Text}"
									Tools_BuildBuffs
								}
							</OnSelect>
						</ComboBox>
						<Listbox Name="BuffsList" Template="VG.ListBox">
							<X>6%</X>
							<Y>81.5%</Y>
							<Width>180</Width>
							<Height>80</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>User</Sort>
							<OnLoad>
								Tools_BuildBuffs
							</OnLoad>
							<OnRightClick>
								Tools_RemoveBuff "${This.SelectedItem}"
								This.SelectedItem:Remove
								Tools_BuildBuffs
							</OnRightClick>
						</Listbox>

					</Tab>
					
					<Tab name='Class'>
						<Frame name='Bard'>
							<Height>100%</Height>
							<Width>100%</Width>
							<Visible>0</Visible>
							<Children>
								 <Text Name='txtBard' Template='VG.BoldText'>
									<X>6%</X>
									<Y>2%</Y>
									<Width>85%</Width>
									<Height>20</Height>
									<Alignment>Center</Alignment>
									<Text>==== Bard Stuff ====  </Text>
								</Text>
								<Text Name='TextCombatSong' Template='VG.BoldText'>
									<X>6%</X>
									<Y>10%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Combat Song:</Text>
								</Text>
								<ComboBox Name="CombatSong" Template="VG.ComboBox">
									<X>6%</X>
									<Y>13%</Y>
									<Width>90%</Width>
									<Height>20</Height>
									<OnLoad>
										This:AddItem[NONE]
									</OnLoad>
									<OnSelect>
										Script[Tools].VariableScope.CombatSong:Set[${This.SelectedItem.Text}]
									</OnSelect>
								</ComboBox>
								<Text Name='TextPrimaryWeapon' Template='VG.BoldText'>
									<X>6%</X>
									<Y>18%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Primary Combat Item:</Text>
								</Text>
								<ComboBox Name="PrimaryWeapon" Template="VG.ComboBox">
									<X>6%</X>
									<Y>21%</Y>
									<Width>90%</Width>
									<Height>20</Height>
									<OnLoad>
										This:AddItem[NONE]
									</OnLoad>
									<OnSelect>
										Script[Tools].VariableScope.PrimaryWeapon:Set[${This.SelectedItem.Text}]
									</OnSelect>
								</ComboBox>
								<Text Name='TextCombatSecondaryWeapon' Template='VG.BoldText'>
									<X>6%</X>
									<Y>26%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Secondary Combat Item:</Text>
								</Text>
								<ComboBox Name="SecondaryWeapon" Template="VG.ComboBox">
									<X>6%</X>
									<Y>29%</Y>
									<Width>90%</Width>
									<Height>20</Height>
									<OnLoad>
										This:AddItem[NONE]
									</OnLoad>
									<OnSelect>
										Script[Tools].VariableScope.SecondaryWeapon:Set[${This.SelectedItem.Text}]
									</OnSelect>
								</ComboBox>
								<Text Name='TextRestSong' Template='VG.BoldText'>
									<X>6%</X>
									<Y>39%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Rest Song:</Text>
								</Text>
								<ComboBox Name="RestSong" Template="VG.ComboBox">
									<X>6%</X>
									<Y>42%</Y>
									<Width>90%</Width>
									<Height>20</Height>
									<OnLoad>
										This:AddItem[NONE]
									</OnLoad>
									<OnSelect>
										Script[Tools].VariableScope.RestSong:Set[${This.SelectedItem.Text}]
									</OnSelect>
								</ComboBox>
								<Text Name='TextBardRestInstrument' Template='VG.BoldText'>
									<X>6%</X>
									<Y>47%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Rest Instrument:</Text>
								</Text>
								<ComboBox Name="RestInstrument" Template="VG.ComboBox">
									<X>6%</X>
									<Y>50%</Y>
									<Width>90%</Width>
									<Height>20</Height>
									<OnLoad>
										This:AddItem[NONE]
									</OnLoad>
									<OnSelect>
										Script[Tools].VariableScope.RestInstrument:Set[${This.SelectedItem.Text}]
									</OnSelect>
								</ComboBox>
								<Text Name='TextBardTravelSong' Template='VG.BoldText'>
									<X>6%</X>
									<Y>60%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Travel Song:</Text>
								</Text>
								<ComboBox Name="TravelSong" Template="VG.ComboBox">
									<X>6%</X>
									<Y>63%</Y>
									<Width>90%</Width>
									<Height>20</Height>
									<OnLoad>
										This:AddItem[NONE]
									</OnLoad>
									<OnSelect>
										Script[Tools].VariableScope.TravelSong:Set[${This.SelectedItem.Text}]
									</OnSelect>
								</ComboBox>
								<Text Name='TextBardTravelInstrument' Template='VG.BoldText'>
									<X>6%</X>
									<Y>68%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Travel Instrument:</Text>
								</Text>
								<ComboBox Name="TravelInstrument" Template="VG.ComboBox">
									<X>6%</X>
									<Y>71%</Y>
									<Width>90%</Width>
									<Height>20</Height>
									<OnLoad>
										This:AddItem[NONE]
									</OnLoad>
									<OnSelect>
										Script[Tools].VariableScope.TravelInstrument:Set[${This.SelectedItem.Text}]
									</OnSelect>
								</ComboBox>
							</Children>
						</Frame>
						
						<Frame name='Sorcerer'>
							<Height>100%</Height>
							<Width>100%</Width>
							<Visible>0</Visible>
							<Children>
								 <Text Name='txtLabel' Template='VG.BoldText'>
									<X>6%</X>
									<Y>2%</Y>
									<Width>85%</Width>
									<Height>20</Height>
									<Alignment>Center</Alignment>
									<Text>==== Sorc Stuff ====  </Text>
								</Text>
							</Children>
						</Frame>

						<Frame name='Ranger'>
							<Height>100%</Height>
							<Width>100%</Width>
							<Visible>0</Visible>
							<Children>
								 <Text Name='txtLabel' Template='VG.BoldText'>
									<X>6%</X>
									<Y>2%</Y>
									<Width>85%</Width>
									<Height>20</Height>
									<Alignment>Center</Alignment>
									<Text>==== Ranger Stuff ====  </Text>
								</Text>
							</Children>
						</Frame>

						<Frame name='Necromancer'>
							<Height>100%</Height>
							<Width>100%</Width>
							<Visible>0</Visible>
							<Children>
								 <Text Name='txtLabel' Template='VG.BoldText'>
									<X>6%</X>
									<Y>2%</Y>
									<Width>85%</Width>
									<Height>20</Height>
									<Alignment>Center</Alignment>
									<Text>==== Necromancer Stuff ====  </Text>
								</Text>
								<Text Name='txtAbominationName' Template='VG.BoldText'>
									<X>8%</X>
									<Y>10%</Y>
									<Width>85%</Width>
									<Height>20</Height>
									<Alignment>Center</Alignment>
									<Text>== Abomination Name ==</Text>
								</Text>
								
								<Textentry Name='AbominationName' Template='VG.TextEntry'>
									<X>6%</X>
									<Y>13%</Y>
									<Width>88%</Width>
									<Height>18</Height>
									<Border>0</Border>
									<OnLoad>
										This:SetText[${Script[Tools].VariableScope.AbominationName}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} > 0
										{
											This:SetText[${This.Text.Lower}]
											variable string temp = "abcdefghijklmnopqrstuvwxyz"
											if ${This.Text.Length}>12 || !${temp.Find[${This.Text.Right[1]}]}
											{
												This:SetText[${Script[Tools].VariableScope.AbominationName}]
											}
											else
											{
												Script[Tools].VariableScope.AbominationName:Set[${This.Text}]
											}
											;echo AbominationName>0 == [${Script[Tools].VariableScope.AbominationName}]
										}
										elseif ${This.Text.Length}==0
										{
											Script[Tools].VariableScope.AbominationName:Set[""]
											;echo AbominationName=0 == [${Script[Tools].VariableScope.AbominationName}]
										}
									</OnChange>
								</Textentry>
								<checkbox Name="doSummonAbomination" Template="VG.GreenCheckbox">
									<visible>1</visible>
									<X>6%</X>
									<Y>17%</Y>
									<Width>25%</Width>
									<Height>15</Height>
									<Text> Awaken Abomination</Text>
									<AutoTooltip> This will summon your Abomination </AutoTooltip>
									<OnLoad>
										if ${Script[Tools].VariableScope.doSummonAbomination}
										{
											This:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										Script[Tools].VariableScope.doSummonAbomination:Set[${This.Checked}]
									</OnLeftClick>
								</checkbox>
								<Textentry Name="AbominationStartAttack" Template="VG.TextEntry">
									<X>6%</X>
									<Y>21%</Y>
									<Width>28</Width>
									<Height>15</Height>
									<Color>FFDDBB00</Color>
									<OnLoad>
										This:SetText[${Script[Tools].VariableScope.AbominationStartAttack}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} == 0
										{
											Script[Tools].VariableScope.AbominationStartAttack:Set[0]
										}
										if ${This.Text.Length} >= 3
										{
											This:SetText[100]
										}
										if ${This.Text.Length} > 0
										{
											Script[Tools].VariableScope.AbominationStartAttack:Set[${Math.Calc[${This.Text}].Int}]
										}
									</OnChange>
								</Textentry>
								<Text Name="txtAbominationStartAttack" Template="VG.Text">
									<X>23%</X>
									<Y>21.2%</Y>
									<Width>200</Width>
									<Height>20</Height>
									<Alignment>Left</Alignment>
									<Text>Pet Start Attacking</Text>
								</Text>
								<checkbox Name="doNecropsy" Template="VG.GreenCheckbox">
									<visible>1</visible>
									<X>6%</X>
									<Y>25%</Y>
									<Width>25%</Width>
									<Height>15</Height>
									<Text> Necropsy</Text>
									<AutoTooltip> Harvest corpse for grafts </AutoTooltip>
									<OnLoad>
										if ${Script[Tools].VariableScope.doNecropsy}
										{
											This:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										Script[Tools].VariableScope.doNecropsy:Set[${This.Checked}]
									</OnLeftClick>
								</checkbox>

							</Children>
						</Frame>

					</Tab>

					<Tab name='BuffBot'>
						<Text Name='txtBuffBot' Template='VG.BoldText'>
							<X>8%</X>
							<Y>2%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>=== Chat Monitor Toggles ===  </Text>
						</Text>
						<checkbox Name="doGroupsay" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>5%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Monitor Group Messages</Text>
							<AutoTooltip> scan all group messages for a keyword to buff </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doGroupsay}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doGroupsay:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doRaidsay" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>9%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Monitor Raid Messages</Text>
							<AutoTooltip> scan all raid messages for a keyword to buff </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doRaidsay}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doRaidsay:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doTells" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>13%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Monitor Tell Messages</Text>
							<AutoTooltip> scan all tells for a keyword to buff </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doTells}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doTells:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<checkbox Name="doRift" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>17%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Buff on Rift</Text>
							<AutoTooltip> buff those that just rifted</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doRift}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doRift:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<checkbox Name="doMonotorTells" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>21%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Log and Ping all Tells</Text>
							<AutoTooltip> this will log and ping all tells</AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doMonotorTells}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doMonotorTells:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<Text Name='txtTriggerBuffing' Template='VG.BoldText'>
							<X>8%</X>
							<Y>25%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>== Phrase to Trigger Buffing ==</Text>
						</Text>
						
						<Textentry Name='TriggerBuffing' Template='VG.TextEntry'>
							<X>6%</X>
							<Y>28%</Y>
							<Width>88%</Width>
							<Height>18</Height>
							<Border>0</Border>
							<OnLoad>
								This:SetText[${Script[Tools].VariableScope.TriggerBuffing}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
									Script[Tools].VariableScope.TriggerBuffing:Set[${This.Text}]
									;echo TriggerBuffing>0 == [${Script[Tools].VariableScope.TriggerBuffing}]
								}
								elseif ${This.Text.Length}==0
								{
									Script[Tools].VariableScope.TriggerBuffing:Set[""]
									;echo TriggerBuffing=0 == [${Script[Tools].VariableScope.TriggerBuffing}]
								}
							</OnChange>
						</Textentry>

						 <Text Name='txtBuffs' Template='VG.BoldText'>
							<X>8%</X>
							<Y>34%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>=== Cast these Buffs ===</Text>
						</Text>
						<ComboBox Name="TriggerBuffsCombo" Template="VG.ComboBox">
							<X>6%</X>
							<Y>37%</Y>
							<Width>190</Width>
							<Height>20</Height>
							<OnLoad>
								This:AddItem[NONE]
							</OnLoad>
							<OnSelect>
								if ${This.SelectedItem.Text(exists)}
								{
									Tools_AddTriggerBuff "${This.SelectedItem.Text}"
									Tools_BuildTriggerBuffs
								}
							</OnSelect>
						</ComboBox>
						<Listbox Name="TriggerBuffsList" Template="VG.ListBox">
							<X>6%</X>
							<Y>41.5%</Y>
							<Width>190</Width>
							<Height>80</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>User</Sort>
							<OnLoad>
								Tools_BuildTriggerBuffs
							</OnLoad>
							<OnRightClick>
								Tools_RemoveTriggerBuff "${This.SelectedItem}"
								This.SelectedItem:Remove
								Tools_BuildTriggerBuffs
							</OnRightClick>
						</Listbox>
						 <Text Name='txtBuffOnly' Template='VG.BoldText'>
							<X>8%</X>
							<Y>62%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>== Buff these PCs/Guilds ==</Text>
						</Text>
						<CommandButton Name="Tools_AddBuffOnlyButton" Template="VG.GreyCommandButton">
							<X>6%</X>
							<Y>65%</Y>
							<Height>18</Height>
							<Width>80</Width>
							<Text>Add Name</Text>
							<OnLeftClick>
								Tools_AddBuffOnly "${Script[Tools].VariableScope.BuffOnlyName}"
								Tools_BuildBuffsOnly
							</OnLeftClick>
						</CommandButton>
						<Textentry Name='BuffOnlyName' Template='VG.TextEntry'>
							<X>47%</X>
							<Y>65%</Y>
							<Width>47%</Width>
							<Height>18</Height>
							<Border>0</Border>
							<OnLoad>
								This:SetText[${Script[Tools].VariableScope.BuffOnlyName}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
									Script[Tools].VariableScope.BuffOnlyName:Set[${This.Text}]
									;echo BuffOnlyName>0 == [${Script[Tools].VariableScope.BuffOnlyName}]
								}
								elseif ${This.Text.Length}==0
								{
									Script[Tools].VariableScope.BuffOnlyName:Set[""]
									;echo BuffOnlyName=0 == [${Script[Tools].VariableScope.BuffOnlyName}]
								}
							</OnChange>
						</Textentry>
						<listbox Name="BuffOnlyList" Template="VG.ListBox">
							<X>6%</X>
							<Y>69.5%</Y>
							<Width>190</Width>
							<Height>80</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>User</Sort>
							<OnLoad>
								Tools_BuildBuffsOnly
							</OnLoad>
							<OnRightClick>
								Tools_RemoveBuffOnly "${This.SelectedItem}"
								This.SelectedItem:Remove
								Tools_BuildBuffsOnly
							</OnRightClick>
						</listbox>
						<Commandbutton Name="BuffArea" Template="VG.GreyCommandButton">
							<visible>1</visible>
							<X>6%</X>
							<Y>88%</Y>
							<Width>190</Width>
							<Height>25</Height>
							<Text>Buff Area</Text>
							<OnRender>
								if ${Script[Tools_BuffArea](exists)}
								{
									This:SetAlpha[0.5]
								}
								else
								{
									This:SetAlpha[1]
								}
							</OnRender>
							<OnLeftClick>
								Script[Tools]:QueueCommand[call BuffArea]
							</OnLeftClick>
							<Data>${Script[Tools_BuffArea](exists)}</Data>
						</Commandbutton>
						<Commandbutton Name="ForceBuffArea" Template="VG.GreyCommandButton">
							<visible>1</visible>
							<X>6%</X>
							<Y>94%</Y>
							<Width>190</Width>
							<Height>25</Height>
							<Text>Force Buff Area</Text>
							<OnRender>
								if ${Script[Tools_BuffArea](exists)}
								{
									This:SetAlpha[0.5]
								}
								else
								{
									This:SetAlpha[1]
								}
							</OnRender>
							<OnLeftClick>
								Script[Tools]:QueueCommand[call ForceBuffArea]
							</OnLeftClick>
							<Data>${Script[Tools_BuffArea](exists)}</Data>
						</Commandbutton>
					</Tab>
					<Tab name='Counters'>
						<Text Name='Header1' Template='VG.BoldText'>
							<X>3%</X>
							<Y>2%</Y>
							<Width>94%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>= Counter1: ${Script[Tools].VariableScope.CounterA} =</Text>
						</Text>
						<checkbox Name="doCounter1Only" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>6%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Counter only these abilities</Text>
							<AutoTooltip> Counter only the following identifed abilities </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doCounter1Only}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doCounter1Only:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name='Counter1' Template='VG.TextEntry'>
							<X>3%</X>
							<Y>10%</Y>
							<Width>84%</Width>
							<Height>20</Height>
							<Color>FFDDBB00</Color>
							<SelectionColor>FF000000</SelectionColor>
							<Border>0</Border>
						</Textentry>
						<Button Name="Counter1Button" Template="VG.GreyCommandButton">
							<X>88%</X>
							<Y>10%</Y>
							<Width>12%</Width>
							<Height>20</Height>
							<Text>Add</Text>
							<Alignment>Center</Alignment>
							<OnLeftClick>
								echo "Adding: ${UIElement[Counter1@Counters@DPS@Tools].Text}"
								Tools_AddCounter1 "${UIElement[Counter1@Counters@DPS@Tools].Text}"
								Tools_BuildCounter1
								UIElement[Counter1@Counters@DPS@Tools]:SetText[]
							</OnLeftClick>
						</Button>
						<Listbox Name="Counter1List" Template="VG.ListBox">
							<X>3%</X>
							<Y>15%</Y>
							<Width>94%</Width>
							<Height>35%</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>User</Sort>
							<OnLoad>
								Tools_BuildCounter1
							</OnLoad>
							<OnRightClick>
								Tools_RemoveCounter1 "${This.SelectedItem}"
								This.SelectedItem:Remove
								Tools_BuildCounter1
							</OnRightClick>
						</Listbox>

						<Text Name='Header2' Template='VG.BoldText'>
							<X>3%</X>
							<Y>52%</Y>
							<Width>94%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>= Counter2: ${Script[Tools].VariableScope.CounterB} =</Text>
						</Text>
						<checkbox Name="doCounter2Only" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>56%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text> Counter only these abilities</Text>
							<AutoTooltip> Counter only the following identifed abilities </AutoTooltip>
							<OnLoad>
								if ${Script[Tools].VariableScope.doCounter2Only}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[Tools].VariableScope.doCounter2Only:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name='Counter2' Template='VG.TextEntry'>
							<X>3%</X>
							<Y>60%</Y>
							<Width>84%</Width>
							<Height>20</Height>
							<Color>FFDDBB00</Color>
							<SelectionColor>FF000000</SelectionColor>
							<Border>0</Border>
						</Textentry>
						<Button Name="Counter2Button" Template="VG.GreyCommandButton">
							<X>88%</X>
							<Y>60%</Y>
							<Width>12%</Width>
							<Height>20</Height>
							<Text>Add</Text>
							<Alignment>Center</Alignment>
							<OnLeftClick>
								echo "Adding: ${UIElement[Counter2@Counters@DPS@Tools].Text}"
								Tools_AddCounter2 "${UIElement[Counter2@Counters@DPS@Tools].Text}"
								Tools_BuildCounter2
								UIElement[Counter2@Counters@DPS@Tools]:SetText[]
							</OnLeftClick>
						</Button>
						<Listbox Name="Counter2List" Template="VG.ListBox">
							<X>3%</X>
							<Y>65%</Y>
							<Width>94%</Width>
							<Height>35%</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>User</Sort>
							<OnLoad>
								Tools_BuildCounter2
							</OnLoad>
							<OnRightClick>
								Tools_RemoveCounter2 "${This.SelectedItem}"
								This.SelectedItem:Remove
								Tools_BuildCounter2
							</OnRightClick>
						</Listbox>
					</Tab>
				</Tabs>
			</TabControl>
		</Children>
	</Window>
</ISUI>