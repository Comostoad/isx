<?xml version="1.0" encoding="UTF-8"?>
<ISUI><!-- Main UI Window -->

	<!-- Font -->
	<Template Name="VG.Font">
		<Name>Tahoma</Name>
		<Size>13</Size>
		<Color>FF100000</Color>
	</Template>
	<Template Name="VG.BoldFont" Template="VG.Font">
		<Bold />
	</Template>

	<!-- Text -->
	<template name="VG.Text.Font" Template="VG.Font" />
	<template name="VG.Text">
		<Font Template="VG.Text.Font" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>
	<template name="VG.BoldText">
		<Font Template="VG.BoldFont" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>

	<!-- Green CheckBox -->
	<Template Name="VG.GreenCheckbox">
		<Font Template="VG.Checkbox.Font" />
		<Texture Template="VG.Checkbox.Texture" />
		<TextureHover Template="VG.Checkbox.TextureHover" />
		<TexturePressed Template="VG.Checkbox.TexturePressed" />
		<TextureChecked Template="VG.Checkbox.TextureChecked" />
		<TextureCheckedHover Template="VG.Checkbox.TextureCheckedHover" />
		<TextureCheckedPressed Template="VG.Checkbox.TextureCheckedPressed" />
	</Template>
	
	<!-- Grey CommandBox -->
	<Template Name="VG.GreyCommandButton">
		<Font Template="vg.button.Font" />
		<Texture Template="vg.button.Texture" />
		<TextureHover Template="vg.button.TextureHover" />
		<TexturePressed Template="vg.button.TexturePressed" />
	</Template>

	<!-- HUD Window -->
	<Template Name="CVG.Window.Client">
		<Y>16</Y>
		<Height>r16</Height>
		<Width>100%</Width>
	</Template>
	<Template Name="CVG.Window">
		<Border>0</Border>
		<BorderColor>FF655025</BorderColor>
		<Resizable>0</Resizable>
		<CloseButton />
		<MinimizeButton />
		<WidthResizable>0</WidthResizable>
		<HeightResizable>0</HeightResizable>
		<TitleBar Template="VG.Window.TitleBar" />
		<OffsetTitleBarHeight />
		<Client Template="CVG.Window.Client" />
		<BackgroundColor>FF000000</BackgroundColor>
		<StorePosition>1</StorePosition>
	</Template>
	
	<!-- Window Name: (VG-Shaman) -->
	<Window Name="VG-Shaman" Template="VG.Window">
		<!-- Basic Window Information -->
		<StorePosition>1</StorePosition>
		<X>100</X>
		<Y>100</Y>
		<Width>280</Width>
		<Height>400</Height>
		<Title>VG-Shaman (${Script[VG-Shaman].VariableScope.Totem})</Title>
		<TitleBar Template="VG.Window.TitleBar">
			<X>0</X>
			<Y>0</Y>
			<Width>99%</Width>
			<Height>18</Height>
			<Children>
				<!-- Centered -->
				<Text Name="Title" Template="VG.Window.TitleBar.Title">
					<X>18</X>
					<Alignment>Center</Alignment>
				</Text>
				<!-- Minimize -->
				<Button Name="Minimize" Template="VG.Window.TitleBar.Minimize">
					<X>1</X>
					<Width>16</Width>
					<Height>16</Height>
				</Button>
				<!-- Close -->
				<CommandButton Name="Custom Quit Button" Template="VG.Window.TitleBar.Close">
					<X>r17</X>
					<Width>16</Width>
					<Height>16</Height>
					<OnLeftClick>
						Script[VG-Shaman].Variable[isRunning]:Set[FALSE]
						endscript VG-Shaman
					</OnLeftClick>
					<Command>ui -unload "&filename;"</Command>					
				</CommandButton>
			</Children>
		</TitleBar>
		<!-- Nothing fancy for Window Client -->
		<Client Template="VG.Window.Client" />

		<Children>
			<!-- Tab: (Tabs) -->
			<TabControl Name="Tabs" Template="VG.Tabcontrol">
				<X>5</X>
				<Y>5</Y>
				<Font>
					<Name>Times New Roman</Name>
					<Size>12</Size>
				</Font>
				<TabHeight>15</TabHeight>
				<TabBorder>3</TabBorder>
				<Height>76%</Height>
				<Width>97%</Width>
				<OnSelect>
					switch ${This.SelectedTab}
					{
						Case Main
							UIElement[VG-Shaman]:SetWidth[280]
							UIElement[VG-Shaman]:SetHeight[400]
							break
						Case About
							UIElement[VG-Shaman]:SetWidth[280]
							UIElement[VG-Shaman]:SetHeight[350]
							break
					}
				</OnSelect>
				<Tabs>

					<!-- Tab Name: (Main) -->
					<Tab Name="Main">
						<Text Name='txtHeals' Template='VG.BoldText'>
							<X>7%</X>
							<Y>2%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>========== Heals ===========  </Text>
						</Text>
						
						
						<checkbox Name="doSmallHeal" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>9%</Y>
							<Width>7%</Width>
							<Height>15</Height>
							<Text>         Small Heal %</Text>
							<AutoTooltip>   Use Remedy </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doSmallHeal}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doSmallHeal:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>						
						<Textentry Name="SmallHealPct" Template="VG.TextEntry">
							<X>14%</X>
							<Y>8.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.SmallHealPct}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.SmallHealPct:Set[0]
								}
								if ${This.Text.Length} >= 3
								{
									This:SetText[100]
								}
								if ${This.Text.Length} > 0
								{
									Script[VG-Shaman].VariableScope.SmallHealPct:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						
						<checkbox Name="doBigHeal" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>16%</Y>
							<Width>7%</Width>
							<Height>15</Height>
							<Text>         Big Heal %</Text>
							<AutoTooltip>   Use Restoration</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doBigHeal}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doBigHeal:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>						
						<Textentry Name="BigHealPct" Template="VG.TextEntry">
							<X>14%</X>
							<Y>15.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.BigHealPct}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.BigHealPct:Set[0]
								}
								if ${This.Text.Length} >= 3
								{
									This:SetText[100]
								}
								if ${This.Text.Length} > 0
								{
									Script[VG-Shaman].VariableScope.BigHealPct:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name="doEmrgHeal" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>23%</Y>
							<Width>7%</Width>
							<Height>15</Height>
							<Text>         Emergency Heal %</Text>
							<AutoTooltip>   Use Intercession and Panacea</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doEmrgHeal}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doEmrgHeal:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>						
						<Textentry Name="EmrgHealPct" Template="VG.TextEntry">
							<X>14%</X>
							<Y>22.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.EmrgHealPct}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.EmrgHealPct:Set[0]
								}
								if ${This.Text.Length} >= 3
								{
									This:SetText[100]
								}
								if ${This.Text.Length} > 0
								{
									Script[VG-Shaman].VariableScope.EmrgHealPct:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>

						<checkbox Name="doLifeWard" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>30%</Y>
							<Width>7%</Width>
							<Height>15</Height>
							<Text>         Life Ward %</Text>
							<AutoTooltip>   Use Life Ward</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doLifeWard}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doLifeWard:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>						
						<Textentry Name="LifeWardPct" Template="VG.TextEntry">
							<X>14%</X>
							<Y>29.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.LifeWardPct}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.LifeWardPct:Set[0]
								}
								if ${This.Text.Length} >= 3
								{
									This:SetText[100]
								}
								if ${This.Text.Length} > 0
								{
									Script[VG-Shaman].VariableScope.LifeWardPct:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>

						<checkbox Name="doAegisofLife" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>37%</Y>
							<Width>7%</Width>
							<Height>15</Height>
							<Text>         Aegis of Life %</Text>
							<AutoTooltip>   Use Aegis of Life on the Tank</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doAegisofLife}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doAegisofLife:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>						
						<Textentry Name="AegisofLifePct" Template="VG.TextEntry">
							<X>14%</X>
							<Y>36.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.AegisofLifePct}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.AegisofLifePct:Set[0]
								}
								if ${This.Text.Length} >= 3
								{
									This:SetText[100]
								}
								if ${This.Text.Length} > 0
								{
									Script[VG-Shaman].VariableScope.AegisofLifePct:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>







						
						<checkbox Name="doTankOnly" Template="VG.GreenCheckbox">
							<visible>0</visible>
							<X>59%</X>
							<Y>30%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Heal Tank Only</Text>
							<AutoTooltip> Toggle to heal only the tank</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doTankOnly}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doTankOnly:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						<checkbox Name="doGroupOnly" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>59%</X>
							<Y>37%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Heal Group Only</Text>
							<AutoTooltip> Toggle to heal only group members</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doGroupOnly}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doGroupOnly:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						
						
						
						<Text Name='txtMisc' Template='VG.BoldText'>
							<X>7%</X>
							<Y>43%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>====== Misc Settings =========  </Text>
						</Text>
						<Text Name="Text-DelayAttack" Template="VG.Text">
							<X>62%</X>
							<Y>49%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Delay Attack</Text>
						</Text>
						<Textentry Name="DelayAttack" Template="VG.TextEntry">
							<X>86%</X>
							<Y>48.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.DelayAttack}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.DelayAttack:Set[0]
								}
								if ${This.Text.Length} >= 4
								{
									This:SetText[2.5]
								}
								if ${This.Text.Length} > 0
								{
									Script[VG-Shaman].VariableScope.DelayAttack:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>

						<checkbox Name="doFollow" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>49%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Follow:</Text>
							<AutoTooltip>  be sure to adjust your Turn-Speed Multiplier in settings </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doFollow}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doFollow:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name="FollowDistance1" Template="VG.TextEntry">
							<X>29%</X>
							<Y>48.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.FollowDistance1}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.FollowDistance1:Set[3]
								}
								if ${This.Text.Length} > 2
								{
									This:SetText[45]
								}
								if ${This.Text.Length} > 0
								{
									if ${This.Text} > 45
									{
										This:SetText[45]
									}
									if  ${This.Text} > ${Script[VG-Shaman].VariableScope.FollowDistance2}
									{
										This:SetText[${Script[VG-Shaman].VariableScope.FollowDistance2}]
									}
									
									Script[VG-Shaman].VariableScope.FollowDistance1:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<Text Name="Text-Follow" Template="VG.Text">
							<X>41%</X>
							<Y>49%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>to</Text>
						</Text>
						<Textentry Name="FollowDistance2" Template="VG.TextEntry">
							<X>46%</X>
							<Y>48.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.FollowDistance2}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.FollowDistance2:Set[3]
								}
								if ${This.Text.Length} > 2
								{
									This:SetText[45]
								}
								if ${This.Text.Length} > 0
								{
									if ${This.Text} > 45
									{
										This:SetText[45]
									}
									if ${Script[VG-Shaman].VariableScope.FollowDistance1} > ${This.Text}
									{
										This:SetText[${Script[VG-Shaman].VariableScope.FollowDistance1}]
									}
									Script[VG-Shaman].VariableScope.FollowDistance2:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>


						<checkbox Name="doLoot" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>55%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Loot</Text>
							<AutoTooltip> Toggle to auto loot</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doLoot}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doLoot:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doFace" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>37%</X>
							<Y>55%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Face</Text>
							<AutoTooltip> Toggle to face the target</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doFace}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doFace:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doHuntersShroud" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>67%</X>
							<Y>55%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Shroud</Text>
							<AutoTooltip> Toggle to go into Stealth (Rakurr Only)</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doHuntersShroud}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doHuntersShroud:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>


						<Text Name='txtAbilities' Template='VG.BoldText'>
							<X>7%</X>
							<Y>62%</Y>
							<Width>85%</Width>
							<Height>20</Height>
							<Alignment>Center</Alignment>
							<Text>====== Combat Toggles ======  </Text>
						</Text>

						<Text Name="Text-StartAttack" Template="VG.Text">
							<X>18%</X>
							<Y>67%</Y>
							<Width>200</Width>
							<Height>20</Height>
							<Alignment>Left</Alignment>
							<Text>Start Attack</Text>
						</Text>
						<Textentry Name="StartAttack" Template="VG.TextEntry">
							<X>4%</X>
							<Y>66.5%</Y>
							<Width>28</Width>
							<Height>15</Height>
							<Color>FFDDBB00</Color>
                            <OnLoad>
								This:SetText[${Script[VG-Shaman].VariableScope.StartAttack}]
                            </OnLoad>
                            <OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Shaman].VariableScope.StartAttack:Set[0]
								}
								if ${This.Text.Length} >= 3
								{
									This:SetText[100]
								}
								if ${This.Text.Length} > 0
								{
									Script[VG-Shaman].VariableScope.StartAttack:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name="doDeAggro" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>67%</X>
							<Y>67%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>deAggro</Text>
							<AutoTooltip> Toggle to reduce hate (Rakurr Only)</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doDeAggro}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doDeAggro:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<checkbox Name="doPhysical" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>73%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Physical</Text>
							<AutoTooltip> Toggle using physical abilities</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doPhysical}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doPhysical:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doSpiritual" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>36%</X>
							<Y>73%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Spiritual</Text>
							<AutoTooltip> Toggle using spiritual abilities</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doSpiritual}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doSpiritual:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doCold" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>67%</X>
							<Y>73%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Cold</Text>
							<AutoTooltip> Toggle using cold abilities</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doCold}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doCold:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doMelee" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>79%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Melee</Text>
							<AutoTooltip> Toggle using melee abilities</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doMelee}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doMelee:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doRangedAttack" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>36%</X>
							<Y>79%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Ranged</Text>
							<AutoTooltip> Toggle using Ranged Attack</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doRangedAttack}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doRangedAttack:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doSpell" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>67%</X>
							<Y>79%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Spells</Text>
							<AutoTooltip> Toggle using Spell abilities</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doSpell}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doSpell:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doSummonPets" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>6%</X>
							<Y>85%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Pet</Text>
							<AutoTooltip> Toggle summoning your pet</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doSummonPets}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doSummonPets:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doUseWeapon" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>36%</X>
							<Y>85%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>Weapon</Text>
							<AutoTooltip> Toggle using Weapon Clickie</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doUseWeapon}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doUseWeapon:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doDebuff" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>67%</X>
							<Y>85%</Y>
							<Width>25%</Width>
							<Height>15</Height>
							<Text>deBuff</Text>
							<AutoTooltip> Toggle using deBuff abilities</AutoTooltip>
							<OnLoad>
								if ${Script[VG-Shaman].VariableScope.doDebuff}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Shaman].VariableScope.doDebuff:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Commandbutton Name="Button-Set Tank" Template="VG.GreyCommandButton">
							<visible>1</visible>
							<X>5%</X>
							<Y>92%</Y>
							<Width>90%</Width>
							<Height>20</Height>
							<Text>Tank:  </Text>
                            <Onload>
								if ${Me.DTarget(exists)}
								{
									Script[VG-Shaman].Variable[Tank]:Set[${Me.DTarget.Name}]
									This:SetText[Tank:  ${Me.DTarget.Name}]
								}
								else
								{
									Script[VG-Shaman].Variable[Tank]:Set[${Me.FName}]
									This:SetText[Tank:  ${Me.FName}]
								}
                            </Onload>
							<OnLeftClick>
								if ${Me.DTarget(exists)}
								{
									Script[VG-Shaman].Variable[Tank]:Set[${Me.DTarget.Name}]
									This:SetText[Tank:  ${Me.DTarget.Name}]
								}
								else
								{
									Script[VG-Shaman].Variable[Tank]:Set[${Me.FName}]
									This:SetText[Tank:  ${Me.FName}]
								}
							</OnLeftClick>
						</Commandbutton>

					</Tab>

					
					<!-- Tab Name: (About) -->
					<Tab name='About'>
						<Text Name='About Line 1'>
							<X>0</X>
							<Y>12%</Y>
							<Width>100%</Width>
							<Height>80%</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>16</Size>
							</Font>
							<Text>VG-Shaman</Text>
						</Text>
						<Text Name='About Line 2'>
							<X>0</X>
							<Y>33%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>14</Size>
							</Font>
							<Text>by Zandros</Text>
						</Text>
						<Text Name='About Line 3'>
							<X>0</X>
							<Y>50%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>11</Size>
							</Font>
							<Text>Combat script for Rakurr Shaman</Text>
						</Text>
						<Text Name='About Line 4'>
							<X>0</X>
							<Y>57%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>10</Size>
							</Font>
							<Text>(Does not contain any movement routines)</Text>
						</Text>
						<Text Name='About Line 5'>
							<X>0</X>
							<Y>70%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>10</Size>
							</Font>
							<Text>Special thanks to Amadeus</Text>
						</Text>
						<Text Name='About Line 6'>
							<X>0</X>
							<Y>77%</Y>
							<Width>100%</Width>
							<Height>15</Height>
							<Alignment>Center</Alignment>
							<Font Template="VG.Text.Font">
								<Name>terminal</Name>
								<Size>10</Size>
							</Font>
							<Text>Testing by Halflight</Text>
						</Text>
					</Tab>
					
					
					
				</Tabs>
			</TabControl>

			<!-- Outside the tab -->
			
			<Text Name="ActionTxt" Template="VG.BoldText">
				<visible>1</visible>
				<X>2%</X>
				<Y>80%</Y>
				<Width>98%</Width>
				<Height>20</Height>
				<Font Template="VG.Text.Font">
					<Color>FFDDBB00</Color>
				</Font>
				<Text> Action: ${Script[VG-Shaman].Variable[Action]}</Text>
				<Text></Text>
			</Text>
			<Text Name="AbilityTxt" Template="VG.BoldText">
				<visible>1</visible>
				<X>2%</X>
				<Y>83%</Y>
				<Width>275</Width>
				<Height>20</Height>
				<Font Template="VG.Text.Font">
					<Color>FFDDBB00</Color>
				</Font>
				<Text> Last Ability: ${Script[VG-Shaman].Variable[ExecutedAbility]}</Text>
				<Text></Text>
			</Text>
			<Text Name="Text-TOT" Template="VG.BoldText">
				<visible>1</visible>
				<X>2%</X>
				<Y>86%</Y>
				<Width>275</Width>
				<Height>20</Height>
				<Font Template="VG.Text.Font">
					<Color>FFDDBB00</Color>
				</Font>
				<Text> Target's Target:  ${Script[VG-Shaman].Variable[TargetsTarget]}</Text>
				<Text></Text>
			</Text>
			<Commandbutton Name="Run Button" Template="VG.GreyCommandButton">
				<visible>1</visible>
				<X>3%</X>
				<Y>93%</Y>
				<Width>62%</Width>
				<Height>23</Height>
				<Text>This script is RUNNING</Text>
				<OnLeftClick>
					if ${Script[VG-Shaman].Variable[isPaused]}
					{
						Script[VG-Shaman].Variable[isPaused]:Set[FALSE]
						This:SetText[This script is RUNNING]
					}
					elseif !${Script[VG-Shaman].Variable[isPaused]}
					{
						Script[VG-Shaman].Variable[isPaused]:Set[TRUE]
						This:SetText[This script is Paused]
						VG:ExecBinding[moveforward,release]
					}
				</OnLeftClick>
			</Commandbutton>
			<Commandbutton Name="BuffArea" Template="VG.GreyCommandButton">
				<visible>1</visible>
				<X>66%</X>
				<Y>79%</Y>
				<Width>31%</Width>
				<Height>23</Height>
				<Text>Buff Area</Text>
				<OnRender>
					if ${Script[BuffArea](exists)}
						This:SetAlpha[0.5]
					else
						This:SetAlpha[1]
				</OnRender>
				<OnLeftClick>
					if ${Script[BuffArea](exists)}
						endscript BuffArea
					elseif !${Script[BuffArea](exists)}
						run ./VG-Shaman/BuffArea.iss
				</OnLeftClick>
				<Data>${Script[BuffArea](exists)}</Data>
			</Commandbutton>
			<Commandbutton Name="UpdateGroup" Template="VG.GreyCommandButton">
				<visible>1</visible>
				<X>66%</X>
				<Y>86%</Y>
				<Width>31%</Width>
				<Height>23</Height>
				<Text>Update Grp</Text>
				<OnLeftClick>
					vgecho "Updating Group Members"
					Script[VG-Shaman].Variable[doFindGroupMembers]:Set[TRUE]
					;Script[VG-Shaman]:QueueCommand[call FindGroupMembers]
				</OnLeftClick>
			</Commandbutton>
			<Commandbutton Name="DropLev" Template="VG.GreyCommandButton">
				<visible>1</visible>
				<X>66%</X>
				<Y>93%</Y>
				<Width>31%</Width>
				<Height>23</Height>
				<Text>Drop Lev</Text>
				<OnLeftClick>
					vgecho "Dropping Levitation"
					VGExecute /can \"Mind Over Body\"
					VGExecute /can \"Boon of Alcipus\"
					VGExecute /can \"Briel's Trill of the Clouds\"
					VGExecute /can \"Cloudwalk\"
					VGExecute /can \"Death March\"
					VGExecute /can \"Deathwalk\"
					VGExecute /can \"Gift of Alcipus\"
					VGExecute /can \"Gravity Suspension\"
					VGExecute /can \"Hollow Symbiote\"
					VGExecute /can \"Parachute\"
					VGExecute /can \"Wings of the Avenger\"
					VGExecute /can \"Group Illusion: Kobold\"
					VGExecute /can \"Do not feed after midnight\"
					VGExecute /can \"Tingling Sensation\"
				</OnLeftClick>
			</Commandbutton>
		</Children>
	</Window>
</ISUI>
