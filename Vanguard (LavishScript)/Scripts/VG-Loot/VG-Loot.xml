<?xml version="1.0" encoding="UTF-8"?>
<ISUI><!-- Main UI Window -->

	<!-- Font -->
	<Template Name="VG.Font">
		<Name>Tahoma</Name>
		<Size>14</Size>
		<Color>FF100000</Color>
	</Template>
	<Template Name="VG.BoldFont" Template="VG.Font">
		<Bold />
	</Template>

	<!-- Text -->
	<template name="VG.Text.Font" Template="VG.Font" />
	<template name="VG.Text">
		<Font Template="VG.Text.Font" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>
	<template name="VG.BoldText">
		<Font Template="VG.BoldFont" />
		<Wrap>0</Wrap>
		<Alignment>Left</Alignment>
		<VerticalAlignment>Top</VerticalAlignment>
	</template>

	<!-- Green CheckBox -->
	<Template Name="VG.GreenCheckbox">
		<Font Template="VG.Checkbox.Font" />
		<Texture Template="VG.Checkbox.Texture" />
		<TextureHover Template="VG.Checkbox.TextureHover" />
		<TexturePressed Template="VG.Checkbox.TexturePressed" />
		<TextureChecked Template="VG.Checkbox.TextureChecked" />
		<TextureCheckedHover Template="VG.Checkbox.TextureCheckedHover" />
		<TextureCheckedPressed Template="VG.Checkbox.TextureCheckedPressed" />
	</Template>
	
	<!-- Grey CommandBox -->
	<Template Name="VG.GreyCommandButton">
		<Font Template="vg.button.Font" />
		<Texture Template="vg.button.Texture" />
		<TextureHover Template="vg.button.TextureHover" />
		<TexturePressed Template="vg.button.TexturePressed" />
	</Template>
	
	<!-- Window Name: (VG-Loot) -->
	<Window Name="VG-Loot" Template="VG.Window">
		<!-- Basic Window Information -->
		<StorePosition>1</StorePosition>
		<X>100</X>
		<Y>100</Y>
		<Width>300</Width>
		<Height>200</Height>
		<Title>VG-Loot</Title>
		<TitleBar Template="VG.Window.TitleBar">
			<X>0</X>
			<Y>0</Y>
			<Width>99%</Width>
			<Height>18</Height>
			<Children>
				<!-- Centered -->
				<Text Name="Title" Template="VG.Window.TitleBar.Title">
					<X>18</X>
					<Alignment>Center</Alignment>
				</Text>
				<!-- Minimize -->
				<Button Name="Minimize" Template="VG.Window.TitleBar.Minimize">
					<X>1</X>
					<Width>16</Width>
					<Height>16</Height>
				</Button>
				<!-- Close -->
				<CommandButton Name="Custom Quit Button" Template="VG.Window.TitleBar.Close">
					<X>r17</X>
					<Width>16</Width>
					<Height>16</Height>
					<OnLeftClick>
						Script[VG-Loot].Variable[isRunning]:Set[FALSE]
						endscript VG-Loot 
					</OnLeftClick>
				</CommandButton>
			</Children>
		</TitleBar>
		<!-- Nothing fancy for Window Client -->
		<Client Template="VG.Window.Client" />
<!--		
		<Client Template="VG.Window.Client">
			<Y>18</Y>
			<Height>r18</Height>
			<Texture Template="VG.TabControl.FrameTexture" />
		</Client>

-->		
		<Children>
			<!-- Tab: (Tabs) -->
			<TabControl Name="Tabs" Template="VG.Tabcontrol">
				<X>5</X>
				<Y>5</Y>
				<Font>
					<Name>Times New Roman</Name>
					<Size>14</Size>
				</Font>
				<OnSelect>
				</OnSelect>
				<TabHeight>20</TabHeight>
				<TabBorder>3</TabBorder>
				<Height>80%</Height>
				<Width>97%</Width>
				<Tabs>
					<!-- Tab Name: (Main) -->
					<Tab Name="Main">
						<checkbox Name="doLoot" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>10%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Loot corpse with a delay of            milliseconds</Text>
							<AutoTooltip>  enabling this will allow you to loot corpses </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Loot].VariableScope.doLoot}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Loot].VariableScope.doLoot:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name="LootDelay" Template="VG.TextEntry">
							<X>64%</X>
							<Y>9%</Y>
							<Width>30</Width>
							<Height>17</Height>
							<Color>FFDDBB00</Color>
							<OnLoad>
								This:SetText[${Script[VG-Loot].VariableScope.LootDelay}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} == 0
								{
									Script[VG-Loot].VariableScope.LootDelay:Set[0]
								}
								if ${This.Text.Length} > 0
								{
									if ${Math.Calc[${This.Text}].Int} > 100
									{
										Script[VG-Loot].VariableScope.LootDelay:Set[100]
										This:SetText[100]
									}
									Script[VG-Loot].VariableScope.LootDelay:Set[${Math.Calc[${This.Text}].Int}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name="doRaidLoot" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>25%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Raid Loot (DANGER)</Text>
							<AutoTooltip>  this will allow looting if you are in a Raid </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Loot].VariableScope.doRaidLoot}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Loot].VariableScope.doRaidLoot:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name="doLootEcho" Template="VG.GreenCheckbox">
							<visible>1</visible>
							<X>3%</X>
							<Y>40%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>VGEcho what you looted</Text>
							<AutoTooltip>  enabling this will echo what you looted to your chat window, nobody sees it but you </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Loot].VariableScope.doLootEcho}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Loot].VariableScope.doLootEcho:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doLootInCombat' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3%</X>
							<Y>55%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Loot while in Combat</Text>
							<AutoTooltip>  enabling this will allow you to loot during combat </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Loot].VariableScope.doLootInCombat}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Loot].VariableScope.doLootInCombat:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='doLootOnly' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3%</X>
							<Y>70%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Loot Only</Text>
							<OnLoad>
								if ${Script[VG-Loot].VariableScope.doLootOnly}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Loot].VariableScope.doLootOnly:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name='LootOnlyEntry' Template='VG.TextEntry'>
							<X>30%</X>
							<Y>70%</Y>
							<Width>65%</Width>
							<Height>17</Height>
							<Color>FFDDBB00</Color>
							<SelectionColor>FF000000</SelectionColor>
							<Border>2</Border>
							<OnLoad>
								This:SetText[${Script[VG-Loot].VariableScope.LootOnly}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
									Script[VG-Loot].VariableScope.LootOnly:Set[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name='doClearTarget' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3%</X>
							<Y>85%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Clear Target</Text>
							<AutoTooltip>  enabling this will clear the target after looting </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Loot].VariableScope.doClearTarget}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Loot].VariableScope.doClearTarget:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
					</Tab>

					<!-- Tab Name: (Trash) -->
					<Tab name='Trash'>
						<checkbox Name='doTrash' Template='VG.GreenCheckbox'>
							<visible>1</visible>
							<X>3.5%</X>
							<Y>8%</Y>
							<Width>15</Width>
							<Height>15</Height>
							<Text>Trash</Text>
							<AutoTooltip>  Delete listed trash from bags </AutoTooltip>
							<OnLoad>
								if ${Script[VG-Loot].VariableScope.doTrash}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[VG-Loot].VariableScope.doTrash:Set[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry Name="TrashEntry" Template="VG.TextEntry">
							<X>21%</X>
							<Y>6%</Y>
							<Width>65%</Width>
							<Height>20</Height>
						</Textentry>
						<CommandButton Name="AddTrash" Template="VG.GreenCommandButton">
							<X>89%</X>
							<Y>5%</Y>
							<Width>10%</Width>
							<Height>20</Height>
							<Text>Add</Text>
							<Alignment>Center</Alignment>
							<OnLeftClick>
								obj_trash:Add[${UIElement[TrashEntry@Trash@Tabs@VG-Loot].Text}]
								obj_trash:Populate[TrashList@Trash@Tabs@VG-Loot]
								UIElement[TrashEntry@Trash@Tabs@VG-Loot]:SetText[]
							</OnLeftClick>
						</CommandButton>
						<Listbox Name="TrashList" Template="VG.ListBox">
							<X>3%</X>
							<Y>25%</Y>
							<Width>95%</Width>
							<Height>70%</Height>
							<AutoSort>TRUE</AutoSort>
							<Sort>Text</Sort>
							<OnLoad>
								obj_trash:Populate[TrashList@Trash@Tabs@VG-Loot]
							</OnLoad>
							<OnRightClick>
								obj_trash:Remove[${This.SelectedItem}]
								This.SelectedItem:Remove
								obj_trash:Populate[TrashList@Trash@Tabs@VG-Loot]
							</OnRightClick>
						</Listbox>
					</Tab>
					
				</Tabs>
			</TabControl>
			<!-- Outside the tab: (Tabs) -->
			<Commandbutton Name="Run Button" Template="VG.GreyCommandButton">
				<visible>1</visible>
				<X>25%</X>
				<Y>86%</Y>
				<Width>50%</Width>
				<Height>25</Height>
				<Text>This script is PAUSED</Text>
				<OnLeftClick>
					if ${Script[VG-Loot].Variable[isPaused]}
					{
						Script[VG-Loot].Variable[isPaused]:Set[FALSE]
						This:SetText[This script is RUNNING]
					}
					elseif !${Script[VG-Loot].Variable[isPaused]}
					{
						Script[VG-Loot].Variable[isPaused]:Set[TRUE]
						This:SetText[This script is Paused]
						VG:ExecBinding[moveforward,release]
						VG:ExecBinding[movebackward,release]
					}
				</OnLeftClick>
			</Commandbutton>
		</Children>
	</Window>
</ISUI>
